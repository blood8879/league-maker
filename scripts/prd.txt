<context>
# Overview  
조기축구 매니저는 아마추어 축구 동호회(조기축구)의 팀 운영을 효율적으로 관리할 수 있는 통합 플랫폼입니다. 

현재 대부분의 아마추어 축구 동호회들은 카카오톡 단체방, 엑셀 파일, 개별 연락 등 분산된 방식으로 팀을 운영하고 있어 비효율적이고 투명성이 부족합니다. 조기축구 매니저는 팀 관리, 경기 일정 관리, 참석률 및 스탯 기록을 하나의 플랫폼에서 체계적으로 관리할 수 있게 해줍니다.

주요 가치:
- 팀 운영의 투명성과 효율성 증대
- 개인 스탯 및 참석률의 체계적 관리  
- 현실적인 아마추어 축구 환경 반영 (외부팀, 용병 시스템 등)

타겟 사용자는 팀장/관리자(팀 운영), 일반 회원(참석 관리, 스탯 확인), 용병(임시 참여자)이며, 주로 모바일 환경에서 실시간 정보 업데이트가 필요한 서비스입니다.

# Core Features  

## 1. 사용자 관리 시스템
- **소셜 로그인**: 구글/카카오 OAuth 인증 (이메일 로그인 제외)
- **프로필 관리**: 기본 정보, 포지션 선택, 프로필 수정
- **멀티팀 지원**: 여러 팀 동시 가입 및 관리

## 2. 팀 관리 시스템  
- **팀 생성 및 검색**: 지역별 팀 검색, 가입 신청 시스템
- **역할 기반 권한 관리**: 구단주(1명) > 운영진(다수) > 주장(1명) > 일반 멤버
- **홈구장 관리**: 필수 등록 시스템, 구장 정보 관리, 즐겨찾기 구장
- **멤버 관리**: 가입 승인/거절, 역할 지정, 권한 위임

## 3. 외부팀 관리 시스템
- **외부팀 등록**: 시스템 미가입 팀들과의 경기를 위한 정보 관리
- **전적 관리**: 외부팀별 승/무/패, 득실점, 주요 선수 스탯
- **히스토리 추적**: 과거 모든 경기 기록, 시즌별 분석

## 4. 경기 일정 관리
- **경기 생성**: 홈구장 필수 선택, 등록팀 vs 외부팀 구분
- **참석 관리**: 정규 멤버 + 용병 통합 관리
- **실시간 현황**: 참석자 명단, 예상 인원, 멀티팀 충돌 감지
- **날씨 정보**: 경기 당일 구장별 날씨 예보 (추후 구현)

## 5. 스탯 관리 시스템
- **경기별 스탯**: 개인별 골/어시스트 기록 (용병 포함)
- **누적 통계**: 참석률, 개인 기록, 팀별 순위
- **외부팀 스탯**: 외부팀 상대 우리팀 선수 기록

## 6. 용병 관리 시스템
- **자동 기록**: 참여한 모든 용병 정보 자동 저장 및 통합
- **용병 풀**: 연락처, 포지션, 평가 등급 관리
- **상세 통계**: 용병별 경기 수, 골/어시스트, 승률, 평점

## 7. 소통 시스템
- **공지사항**: 팀 운영진의 공지 관리
- **알림 시스템**: 경기 일정, 가입 승인, 공지 알림

# User Experience  

## 주요 사용자 페르소나

### 1. 팀장/관리자 (구단주, 운영진)
- **니즈**: 효율적인 팀 운영, 투명한 관리, 시간 절약
- **주요 기능**: 경기 생성, 멤버 관리, 스탯 입력, 외부팀 관리
- **사용 패턴**: 경기 전후 집중 사용, 주간 관리 업무

### 2. 일반 회원
- **니즈**: 경기 참석 관리, 개인 기록 확인, 팀 정보 조회  
- **주요 기능**: 참석 신청, 스탯 조회, 팀 검색/가입
- **사용 패턴**: 경기 일정 확인, 참석 여부 입력

### 3. 용병 (비회원)
- **니즈**: 간편한 참여, 개인 기록 확인
- **주요 기능**: 참석 확인, 기본 정보 제공
- **사용 패턴**: 경기별 일회성 사용

## 핵심 사용자 플로우

### 팀 생성 및 초기 설정
1. 소셜 로그인 → 프로필 생성
2. 팀 기본 정보 입력 → 구단주 자동 설정
3. **홈구장 등록** (필수) → 팀 활성화
4. 멤버 초대 및 권한 설정

### 경기 운영 플로우  
1. 경기 생성 (홈구장 선택, 상대팀 설정)
2. 멤버 참석 신청 및 용병 추가
3. 경기 진행 
4. 스탯 입력 및 결과 기록
5. 전적 및 통계 자동 업데이트

### 멀티팀 사용자 플로우
1. 팀별 대시보드 전환
2. 통합 일정 확인 및 충돌 감지  
3. 팀별 개별 참석 선택
4. 우선순위 팀 기반 알림 관리

## UI/UX 고려사항
- **모바일 퍼스트**: 주 사용 환경이 모바일
- **직관적 네비게이션**: 팀별 대시보드 쉬운 전환
- **실시간 업데이트**: 참석 현황, 알림 즉시 반영
- **시각적 구분**: 등록팀 vs 외부팀 명확한 표시
- **접근성**: 연령대 고려한 단순하고 명확한 UI

# Technical Architecture  

## 시스템 컴포넌트
- **백엔드**: Supabase (Database + Auth + Real-time + Storage)
- **프론트엔드**: Next.js + TypeScript
- **스타일링**: TailwindCSS + Framer Motion
- **상태관리**: Zustand
- **인증**: Supabase Auth (구글/카카오 OAuth)

## 데이터 모델

### 핵심 엔티티
```sql
-- 사용자 및 팀 관계
users: id, email, name, nickname, phone, position
teams: id, name, description, region, activity_info
team_members: team_id, user_id, role, is_primary_team

-- 구장 관리
home_stadiums: id, team_id, name, address, coordinates
favorite_stadiums: id, team_id, name, address, coordinates

-- 외부팀 및 경기
external_teams: id, team_id, name, region, contact
matches: id, team_id, match_type, opponent_info, stadium_id, date_time
match_attendances: match_id, user_id, attendance_type, status

-- 스탯 및 기록
match_stats: match_id, user_id, player_type, goals, assists
mercenary_records: id, team_id, name, contact, total_stats
external_team_records: team_id, external_team_id, win_lose_stats
```

### 주요 관계
- **User ↔ Team**: N:M (멀티팀 가입)
- **Team → Stadium**: 1:N (홈구장 + 즐겨찾기)  
- **Team → External_Team**: 1:N (팀별 독립 관리)
- **Match → Stats**: 1:N (참가자별 기록)
- **Team → Mercenary**: 1:N (팀별 용병 풀)

## API 설계 (Supabase 기반)
- **실시간 구독**: 참석 현황, 알림, 경기 업데이트
- **Row Level Security**: 팀별 데이터 접근 제어
- **Functions**: 복잡한 통계 계산, 전적 업데이트
- **Triggers**: 자동 알림, 데이터 무결성 보장

## 외부 연동
- **지도 서비스**: 구장 위치 표시 및 검색
- **날씨 API**: 경기 당일 날씨 정보 (추후)
- **소셜 로그인**: 구글/카카오 OAuth Provider

## 인프라 요구사항
- **Supabase 호스팅**: 데이터베이스, 인증, 실시간 기능
- **Vercel 배포**: Next.js 애플리케이션 호스팅
- **CDN**: 이미지 및 정적 자원 최적화
- **모니터링**: Supabase 대시보드 + 커스텀 로깅

# Development Roadmap  

## Phase 1: MVP 핵심 (4-6주)
**목표**: 기본적인 팀 관리와 경기 운영이 가능한 최소 기능

### 1주차: 기반 인프라
- Next.js + Supabase 프로젝트 셋업
- 소셜 로그인 (구글/카카오) 구현
- 기본 사용자 프로필 관리
- 기본 UI 컴포넌트 라이브러리 구축

### 2주차: 팀 관리 기초
- 팀 생성/검색/가입 기능
- 역할 기반 권한 시스템 (구단주/운영진/주장/멤버)
- 멤버 관리 (승인/거절/강퇴)
- 홈구장 등록 시스템 (필수)

### 3주차: 경기 관리 기초  
- 경기 생성 (홈구장 기반)
- 기본 참석 관리 (정규 멤버)
- 경기 목록 및 상세 보기
- 참석 현황 실시간 업데이트

### 4주차: 외부팀 기초
- 외부팀 등록 및 관리
- 외부팀과의 경기 생성
- 기본 전적 기록 (승/무/패)

## Phase 2: 스탯 및 고급 관리 (4-5주)  
**목표**: 완전한 경기 운영과 통계 관리

### 5주차: 스탯 시스템
- 경기별 스탯 입력 (골/어시스트)
- 개인별 누적 통계 조회
- 팀 스탯 현황 및 순위
- 참석률 계산 및 표시

### 6주차: 용병 관리 기초
- 용병 참석 관리 시스템
- 기본 용병 기록 (이름/연락처)
- 용병 스탯 포함 시스템

### 7주차: 소통 기능
- 공지사항 작성/관리
- 기본 알림 시스템
- 팀별 대시보드 완성

### 8주차: 외부팀 고급 기능
- 외부팀별 상세 전적
- 외부팀 상대 개인 스탯
- 즐겨찾기 구장 관리

## Phase 3: 고급 기능 및 최적화 (3-4주)
**목표**: 멀티팀 지원과 고급 용병 관리

### 9주차: 멀티팀 지원  
- 소속팀 전환 시스템
- 통합 경기 일정 뷰
- 참석 충돌 감지 및 알림

### 10주차: 고급 용병 관리
- 용병 풀 시스템  
- 용병 평가 및 등급 관리
- 용병별 상세 통계

### 11주차: UX 개선 및 최적화
- 모바일 UI/UX 최적화
- 성능 개선 및 로딩 최적화  
- 고급 알림 및 설정

## V2 이후 확장 기능
- 리그 생성 및 관리
- 회비 관리 시스템  
- 실시간 채팅
- 용병 매칭 네트워크
- 경기장 예약 연동
- 사진/영상 갤러리

# Logical Dependency Chain

## 개발 순서와 의존성

### 1단계: 기반 시스템 (병렬 개발 가능)
```
인증 시스템 → 사용자 프로필
     ↓
UI 컴포넌트 라이브러리 → 기본 레이아웃
```

### 2단계: 팀 관리 (순차적 의존성)
```
팀 생성 → 권한 시스템 → 멤버 관리
    ↓
홈구장 등록 (필수) → 경기 생성 가능
```

### 3단계: 경기 운영 (홈구장 이후)
```
홈구장 시스템 → 경기 생성 → 참석 관리
         ↓
    외부팀 등록 → 외부팀 경기
```

### 4단계: 데이터 수집 및 분석
```
경기 운영 → 스탯 입력 → 개인/팀 통계
     ↓
용병 참여 → 용병 기록 → 용병 통계
```

### 5단계: 고급 기능 (모든 기본 기능 이후)
```
기본 시스템 완성 → 멀티팀 지원
         ↓
    고급 용병 관리 → 고급 통계
```

## 핵심 의존성 규칙
1. **홈구장 등록 우선**: 경기 생성의 전제 조건
2. **권한 시스템 우선**: 모든 관리 기능의 기반
3. **기본 경기 운영 완성 후 스탯**: 데이터 수집 기반 필요
4. **단일팀 완성 후 멀티팀**: 복잡성 관리
5. **MVP 완성 후 고급 기능**: 사용자 피드백 기반 개선

## 빠른 사용 가능한 마일스톤
- **2주차 끝**: 팀 생성 및 멤버 관리 가능
- **3주차 끝**: 기본 경기 일정 관리 가능  
- **4주차 끝**: 외부팀과의 경기 포함 완전한 경기 운영
- **8주차 끝**: 모든 기본 기능 완성된 사용 가능한 제품

# Risks and Mitigations  

## 기술적 위험 요소

### 1. Supabase 의존성 위험
**위험**: 백엔드를 완전히 Supabase에 의존하여 제약 발생 가능
**완화책**: 
- Supabase 기능 범위 사전 검증 완료
- 핵심 로직을 Database Functions로 구현하여 이식성 확보
- PostgreSQL 표준 기능 최대 활용

### 2. 실시간 기능 성능
**위험**: 실시간 참석 관리에서 동시 접속자 증가시 성능 저하
**완화책**:
- Supabase Realtime 구독 최적화
- 필요한 데이터만 실시간 구독
- 클라이언트 캐싱 전략 적용

### 3. 복잡한 권한 관리
**위험**: 역할 기반 권한 시스템의 복잡성으로 인한 보안 이슈
**완화책**:
- Row Level Security 정책 철저한 테스트
- 권한 매트릭스 문서화
- 단계적 권한 기능 구현

## MVP 범위 관리

### 1. 기능 범위 확장 위험  
**위험**: 개발 중 기능 요구사항 지속적 확장
**완화책**:
- 명확한 Phase 구분 및 고수
- MVP 이후 기능은 V2로 엄격 분류
- 사용자 피드백 기반 우선순위 재조정

### 2. 멀티팀 복잡성
**위험**: 멀티팀 지원으로 인한 데이터 모델 복잡성
**완화책**:
- 단일팀 완벽 구현 후 멀티팀 추가
- 팀별 데이터 격리 설계
- 점진적 기능 추가

## 사용자 채택 위험

### 1. 기존 도구 대체 어려움
**위험**: 카카오톡, 엑셀 등 기존 도구에서 전환 저항
**완화책**:
- 기존 도구보다 명확한 이점 제공
- 단계적 마이그레이션 지원
- 간편한 데이터 입력 방식

### 2. 모바일 UX 최적화 필요
**위험**: 주 사용 환경이 모바일인데 UX 최적화 부족
**완화책**:
- 모바일 퍼스트 디자인
- 핵심 기능 터치 최적화
- 빠른 로딩 및 오프라인 대응

## 리소스 제약

### 1. 단일 개발자 위험
**위험**: 개발 리소스 부족으로 일정 지연
**완화책**:
- 명확한 우선순위와 단계별 개발
- 기술 스택 단순화 (Supabase 활용)
- 핵심 기능 먼저 완성

### 2. 디자인 리소스 부족  
**위험**: UI/UX 디자인 품질 저하
**완화책**:
- TailwindCSS + 기존 컴포넌트 라이브러리 활용
- 단순하고 직관적인 디자인 우선
- 사용자 피드백 기반 점진적 개선

# Appendix  

## 연구 조사 결과

### 기존 솔루션 분석
- **플랩**: 풋살 중심, 개인 매칭 서비스
- **팀업**: 다양한 스포츠, 개인 중심
- **조기축구 카페**: 커뮤니티 중심, 관리 도구 부족

### 차별화 포인트
- 팀 중심 관리 도구
- 현실적인 아마추어 축구 환경 반영 (외부팀, 용병)
- 체계적인 통계 및 기록 관리

## 상세 기술 명세

### 데이터베이스 스키마 (Supabase PostgreSQL)
```sql
-- 상세 테이블 구조는 개발 단계에서 구체화
-- RLS 정책, 인덱스, 트리거 포함
```

### API 엔드포인트 설계
```
GET /api/teams - 팀 목록 조회
POST /api/teams - 팀 생성  
GET /api/matches - 경기 일정 조회
POST /api/matches - 경기 생성
```

### 성능 최적화 전략
- 이미지 최적화 (Next.js Image)
- 데이터 캐싱 (SWR/React Query)
- 지연 로딩 및 코드 스플리팅

## 성공 지표 (KPI)

### 초기 지표 (MVP 출시 후 3개월)
- 팀 생성 수: 50개 팀
- 홈구장 등록 완료율: 80%
- 월평균 경기 생성: 팀당 4회
- 사용자 재방문율: 주간 60%

### 성장 지표 (출시 후 6개월)
- 활성 팀 수: 200개 팀  
- 용병 재참여율: 40%
- 외부팀 등록 및 활용률: 팀당 평균 5개 외부팀
- 참석률 입력 완료율: 90%

### 장기 지표 (1년 후)
- 지역별 시장 점유율
- 프리미엄 기능 전환율
- 커뮤니티 기여도 (리뷰, 추천)

## 추가 고려사항

### 법적/규정 고려사항
- 개인정보보호법 준수 (연락처, 위치 정보)
- 소셜 로그인 개인정보 처리 동의
- 이용약관 및 개인정보처리방침

### 확장성 고려사항  
- 지역별 서비스 확장 전략
- 다른 스포츠로의 확장 가능성
- B2B 시장 진출 (기업체 동호회)

### 수익모델 (V2 이후)
- 프리미엄 구독 (고급 통계, 무제한 기능)
- 경기장 예약 수수료
- 용품 판매 제휴
</context> 