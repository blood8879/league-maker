{
  "tasks": [
    {
      "id": 1,
      "title": "Project Setup and Infrastructure",
      "description": "Initialize Next.js project with TypeScript, Supabase integration, and development environment setup",
      "details": "Create Next.js 14+ project with TypeScript, install and configure Supabase client, setup TailwindCSS, Framer Motion, and Zustand. Configure environment variables for Supabase URL and anon key. Setup project structure with /components, /pages, /lib, /types directories. Initialize git repository and setup basic CI/CD pipeline.",
      "testStrategy": "Verify project builds successfully, Supabase connection works, and all dependencies are properly installed. Test development server startup and basic routing.",
      "priority": "high",
      "dependencies": [],
      "status": "done",
      "subtasks": [
        {
          "id": 1,
          "title": "Create Next.js Project with TypeScript Configuration",
          "description": "Initialize a new Next.js project using create-next-app with TypeScript enabled. Ensure the project is set up with the appropriate TypeScript configuration files.",
          "dependencies": [],
          "details": "Run `npx create-next-app@latest --ts` and follow the prompts to set up the project with TypeScript support. Verify that tsconfig.json and necessary type dependencies are present.",
          "status": "done"
        },
        {
          "id": 2,
          "title": "Set Up Supabase Client and Environment Configuration",
          "description": "Install the Supabase client library and configure environment variables for connecting to the Supabase backend.",
          "dependencies": [
            1
          ],
          "details": "Install @supabase/supabase-js, create a supabase client utility, and add environment variables (e.g., SUPABASE_URL, SUPABASE_ANON_KEY) to .env.local. Test the connection.",
          "status": "done"
        },
        {
          "id": 3,
          "title": "Install TailwindCSS and Styling Framework",
          "description": "Add TailwindCSS and any additional styling frameworks to the project, and configure them for use with Next.js and TypeScript.",
          "dependencies": [
            1
          ],
          "details": "Install TailwindCSS using the official setup guide, generate tailwind.config.js and postcss.config.js, and import Tailwind styles in the global stylesheet.",
          "status": "done"
        },
        {
          "id": 4,
          "title": "Organize Project Structure",
          "description": "Establish a clear and scalable project directory structure, including folders for components, pages, utilities, and styles.",
          "dependencies": [
            1,
            2,
            3
          ],
          "details": "Create directories such as /components, /pages (or /app), /utils, and /styles. Move initial files as needed and update imports to match the new structure.",
          "status": "done"
        },
        {
          "id": 5,
          "title": "Set Up CI/CD Pipeline",
          "description": "Configure a continuous integration and deployment pipeline for the project using a platform such as GitHub Actions or Vercel.",
          "dependencies": [
            1,
            2,
            3,
            4
          ],
          "details": "Create configuration files for CI/CD, such as .github/workflows/main.yml or set up deployment on Vercel. Ensure the pipeline installs dependencies, runs tests, and deploys on push.",
          "status": "done"
        }
      ]
    },
    {
      "id": 2,
      "title": "Supabase Database Schema Design",
      "description": "Create comprehensive database schema for users, teams, matches, and all core entities",
      "details": "Design and implement PostgreSQL schema including: users table (id, email, name, nickname, phone, position), teams table (id, name, description, region, activity_info), team_members table (team_id, user_id, role, is_primary_team), home_stadiums, external_teams, matches, match_attendances, match_stats, mercenary_records tables. Setup proper foreign key relationships, indexes, and constraints.",
      "testStrategy": "Validate schema creation, test foreign key constraints, verify data types and nullable fields. Run sample data insertion and query tests.",
      "priority": "high",
      "dependencies": [
        1
      ],
      "status": "done",
      "subtasks": [
        {
          "id": 1,
          "title": "사용자 프로필 테이블 설계 및 생성",
          "description": "사용자 기본 정보와 프로필 관리를 위한 테이블을 설계하고 생성합니다.",
          "details": "users 테이블: id (UUID, PK), email (unique), name, nickname, phone, position (enum), avatar_url, created_at, updated_at. Supabase Auth와 연동하여 사용자 프로필 정보를 관리합니다.",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 2
        },
        {
          "id": 2,
          "title": "팀 및 팀 멤버십 테이블 설계",
          "description": "팀 정보와 팀 멤버 관계를 관리하는 테이블들을 설계하고 생성합니다.",
          "details": "teams 테이블: id (UUID, PK), name (unique), description, home_stadium, region, created_by, created_at, updated_at. team_members 테이블: id (UUID, PK), team_id (FK), user_id (FK), role (enum: owner, manager, captain, member), status (enum: pending, approved, rejected), joined_at.",
          "status": "done",
          "dependencies": [
            1
          ],
          "parentTaskId": 2
        },
        {
          "id": 3,
          "title": "홈 구장 및 외부 팀 테이블 설계",
          "description": "홈 구장 정보와 등록되지 않은 외부 팀 관리를 위한 테이블들을 설계합니다.",
          "details": "home_stadiums 테이블: id (UUID, PK), name, address, facilities, contact_info, team_id (FK). external_teams 테이블: id (UUID, PK), name, region, contact_info, created_by_team_id (FK), notes, created_at.",
          "status": "done",
          "dependencies": [
            2
          ],
          "parentTaskId": 2
        },
        {
          "id": 4,
          "title": "경기 및 출석 관리 테이블 설계",
          "description": "경기 정보와 참석자 출석 관리를 위한 테이블들을 설계하고 생성합니다.",
          "details": "matches 테이블: id (UUID, PK), home_team_id (FK), away_team_id (FK, nullable), away_team_name (외부팀용), stadium, match_date, status (enum), description, created_at. match_attendances 테이블: id (UUID, PK), match_id (FK), user_id (FK), status (enum: attending, not_attending, maybe), is_mercenary (boolean), notes.",
          "status": "done",
          "dependencies": [
            3
          ],
          "parentTaskId": 2
        },
        {
          "id": 5,
          "title": "경기 통계 및 용병 기록 테이블 설계",
          "description": "경기 중 개인 통계와 용병 활동 기록을 관리하는 테이블들을 설계합니다.",
          "details": "match_stats 테이블: id (UUID, PK), match_id (FK), user_id (FK), goals, assists, yellow_cards, red_cards, is_mercenary. mercenary_records 테이블: id (UUID, PK), user_id (FK), team_id (FK), match_id (FK), contact_method, notes, created_at.",
          "status": "done",
          "dependencies": [
            4
          ],
          "parentTaskId": 2
        },
        {
          "id": 6,
          "title": "데이터베이스 제약조건 및 인덱스 설정",
          "description": "외래키 제약조건, 인덱스, 및 데이터 무결성을 위한 설정을 구현합니다.",
          "details": "모든 테이블 간 외래키 관계 설정, 성능 최적화를 위한 인덱스 생성 (team_id, user_id, match_date 등), unique 제약조건 설정 (team name, user email 등), check 제약조건 추가.",
          "status": "done",
          "dependencies": [
            5
          ],
          "parentTaskId": 2
        },
        {
          "id": 7,
          "title": "기본 RLS 정책 구조 설계",
          "description": "팀 기반 데이터 접근 제어를 위한 기본적인 RLS 정책 구조를 설계합니다.",
          "details": "각 테이블별 기본 RLS 정책 활성화, 팀 멤버십 기반 접근 제어 정책 설계, 사용자 자신의 데이터 접근 정책, 팀 소유자/관리자 권한 정책 기본 구조 생성. 실제 구현은 작업 3에서 진행.",
          "status": "done",
          "dependencies": [
            6
          ],
          "parentTaskId": 2
        }
      ]
    },
    {
      "id": 3,
      "title": "Row Level Security (RLS) Implementation",
      "description": "Implement comprehensive RLS policies for team-based data access control",
      "details": "Create RLS policies for all tables ensuring users can only access data from teams they belong to. Implement role-based access (구단주 > 운영진 > 주장 > 일반멤버) with appropriate CRUD permissions. Setup policies for: team data access, match management, stats viewing, member management based on user roles.",
      "testStrategy": "Test data isolation between teams, verify role-based permissions work correctly, ensure unauthorized access is blocked. Test with multiple user scenarios.",
      "priority": "high",
      "dependencies": [
        2
      ],
      "status": "done",
      "subtasks": [
        {
          "id": 1,
          "title": "Design Team-Based Data Isolation Policies",
          "description": "Define and implement RLS policies that ensure users can only access data belonging to their own team, preventing cross-team data leakage.",
          "dependencies": [],
          "details": "Analyze the data schema to identify team ownership fields. Create RLS policies that restrict SELECT, INSERT, UPDATE, and DELETE operations to rows where the user's team matches the row's team identifier.\n<info added on 2025-05-31T08:00:47.830Z>\n팀 기반 데이터 격리 정책 설계 완료\n\n구현한 내용:\n- 모든 주요 테이블에 대한 RLS 활성화 및 정책 정의\n- 팀 소유권 기반 데이터 접근 제어 (team_members 테이블 기준)\n- 각 테이블별 CRUD 권한 정책:\n  * teams: 팀 멤버만 조회, 생성자가 소유자, 소유자/운영진만 수정, 소유자만 삭제\n  * team_members: 같은 팀 멤버만 조회, 소유자/운영진만 멤버 관리\n  * matches: 홈/어웨이팀 멤버만 조회, 주장급 이상만 생성/수정, 운영진 이상만 삭제\n  * match_attendance: 관련 팀 멤버만 조회, 본인만 참석 응답 관리\n  * player_stats: 관련 팀 멤버만 조회, 주장급 이상만 입력/수정\n  * external_teams: 등록팀 멤버만 조회, 주장급 이상만 관리\n- 헬퍼 함수 정의: 권한 확인을 위한 재사용 가능한 함수들\n\n모든 정책이 auth.uid()를 기반으로 하여 Supabase Auth와 완전히 통합됨.\n</info added on 2025-05-31T08:00:47.830Z>",
          "status": "done"
        },
        {
          "id": 2,
          "title": "Implement Role Hierarchy Permission Policies",
          "description": "Establish RLS policies that enforce permissions based on the role hierarchy (Owner > Staff > Captain > Member) within each team.",
          "dependencies": [
            1
          ],
          "details": "Map user roles to permission levels. Define RLS policies that grant or restrict actions (e.g., editing team info, managing members) according to the user's role within their team.\n<info added on 2025-05-31T08:05:57.320Z>\n✅ 역할 계층 권한 정책 구현 완료\n\n구현한 내용:\n1. **역할 계층 시스템 설정**\n   - Owner(4) > Manager(3) > Captain(2) > Member(1) 레벨 시스템\n   - 역할별 권한 레벨 비교 함수들 구현\n\n2. **세밀한 권한 검증 함수들**\n   - get_role_level(): 역할별 권한 레벨 반환\n   - has_higher_role(): 다른 역할보다 높은 권한 확인  \n   - has_minimum_role(): 최소 요구 역할 확인\n   - can_modify_member_role(): 멤버 역할 변경 권한 검증\n   - transfer_team_ownership(): 팀 소유권 이전 기능\n\n3. **기능별 권한 함수들**\n   - can_input_match_results(): 경기 결과 입력 권한 (captain+)\n   - can_modify_team_settings(): 팀 설정 변경 권한 (manager+)\n   - can_invite_members(): 멤버 초대 권한 (captain+)\n   - can_manage_mercenary_requests(): 용병 관리 권한 (captain+)\n   - can_modify_match_stats(): 통계 수정 권한 (captain+)\n   - can_delete_team(): 팀 해체 권한 (owner만)\n   - can_remove_member(): 멤버 제거 권한 (계층별 차등)\n\n4. **권한 매트릭스 및 감사**\n   - user_team_permissions 뷰: 사용자별 권한 현황 조회\n   - permission_audit_log 테이블: 권한 검증 로그 기록\n   - 권한 검증 트리거 시스템 구축\n\n5. **데이터 무결성 강화**\n   - 경기 결과 입력 체크 제약 조건\n   - 팀 정보 수정 권한 체크 제약 조건\n\n모든 권한이 역할 계층을 존중하며, 하위 역할이 상위 역할의 권한을 침범할 수 없도록 구현됨.\n</info added on 2025-05-31T08:05:57.320Z>",
          "status": "done"
        },
        {
          "id": 3,
          "title": "Define Match and Statistics Access Policies",
          "description": "Create RLS policies to control access to match data and player statistics, ensuring only authorized team members and roles can view or modify relevant records.",
          "dependencies": [
            1,
            2
          ],
          "details": "Determine which roles can access or modify match results and statistics. Implement RLS policies that enforce these rules, considering both team membership and role.\n<info added on 2025-05-31T08:08:16.682Z>\n✅ 경기 및 통계 액세스 정책 정의 완료\n\n구현한 내용:\n1. **경기 상태별 접근 제어**\n   - can_access_match_by_status(): 경기 상태에 따른 세밀한 권한 제어\n   - 'view': 모든 팀 멤버 조회 가능\n   - 'edit_details': captain+ 역할, scheduled 상태에서만 수정\n   - 'input_result': captain+ 역할, ongoing/completed 상태에서 결과 입력\n   - 'modify_result': manager+ 역할, completed 상태에서 결과 수정\n   - 'cancel': manager+ 역할만 경기 취소 가능\n\n2. **통계 데이터 시간 기반 제어**\n   - can_modify_stats_by_timing(): 경기 완료 후 72시간 이내에만 통계 입력/수정 허용\n   - 경기 상태가 'completed'일 때만 통계 입력 가능\n   - 시간 제한으로 데이터 무결성 보장\n\n3. **개인 vs 팀 통계 접근 제어**\n   - can_access_player_stats(): 개인별 통계 접근 권한 세분화\n   - 'view': 같은 팀 멤버 간 통계 조회 가능\n   - 'input': captain+ 역할만 통계 입력\n   - 'modify': 본인 통계는 captain+, 타인 통계는 manager+\n   - 'delete': manager+ 역할만 통계 삭제\n\n4. **참석 관리 권한 시스템**\n   - can_manage_attendance(): 경기 참석 관리 권한\n   - 본인 참석 응답: 본인만 수정 가능\n   - 타인 참석 상태 관리: captain+ 역할\n\n5. **데이터 무결성 보장 트리거**\n   - 경기 결과 수정 시간 제한 (완료 후 24시간)\n   - 경기 상태 자동 업데이트 (결과 입력 시 completed로 변경)\n   - 통계 입력 검증 (완료된 경기, 팀 멤버만)\n\n6. **세밀한 RLS 정책 추가**\n   - match_stats_timing_policy: 시간 기반 통계 수정 제한\n   - match_stats_delete_policy: manager+ 역할만 삭제\n   - attendance_management_policy: 역할별 참석 관리\n   - match_details_edit_policy: 상태별 경기 정보 수정\n   - match_result_input_policy: 역할 및 상태별 결과 입력/수정\n\n모든 정책이 경기 상태, 시간, 역할을 종합적으로 고려하여 적절한 접근 제어를 제공함.\n</info added on 2025-05-31T08:08:16.682Z>",
          "status": "done"
        },
        {
          "id": 4,
          "title": "Secure Member Management Operations",
          "description": "Develop RLS policies for member management actions (inviting, removing, updating members), ensuring only users with sufficient privileges can perform these operations.",
          "dependencies": [
            2
          ],
          "details": "Identify member management endpoints and required privileges. Write RLS policies that allow only Owners and Staff to manage team membership, while restricting such actions for Captains and Members.\n<info added on 2025-05-31T08:13:30.133Z>\n## 멤버 관리 작업 분류\n팀 멤버 관리에는 다음과 같은 작업들이 있습니다:\n\n1. **멤버 초대 및 가입 신청 관리**\n   - 새로운 멤버 초대 (captain+ 권한)\n   - 가입 신청 승인/거절 (manager+ 권한)\n   - 초대 링크 생성 및 관리\n\n2. **멤버 역할 관리**\n   - 멤버 역할 변경 (자신보다 하위 역할만, manager+ 권한)\n   - 소유권 이전 (owner만)\n   - 임시 권한 위임 시스템\n\n3. **멤버 제거 및 상태 관리**\n   - 멤버 강퇴 (계층별 차등 권한)\n   - 멤버 자발적 탈퇴\n   - 멤버 활동 정지 처리\n\n4. **멤버 정보 관리**\n   - 팀 내 닉네임 설정\n   - 멤버 연락처 정보 관리\n   - 멤버 가입 날짜 및 기록\n\n## 보안 요구사항 식별\n- Owner/Manager만이 팀 구성을 실질적으로 변경 가능\n- Captain은 제한적인 멤버 관리 권한 (초대만)\n- 자신보다 같거나 높은 권한의 멤버는 관리 불가\n- 모든 멤버 관리 작업에 대한 감사 로그 필요\n</info added on 2025-05-31T08:13:30.133Z>\n<info added on 2025-05-31T08:18:48.598Z>\n## RLS 정책 구현 완료\n\n멤버 관리를 위한 포괄적인 RLS 정책이 성공적으로 구현되었습니다.\n\n### 구현된 핵심 기능\n\n**역할 계층 권한 시스템**\n- get_role_level(): 역할별 권한 레벨 반환 (owner=4, manager=3, captain=2, member=1)\n- has_higher_role(): 역할 간 권한 비교\n- has_minimum_role(): 최소 권한 요구사항 확인\n- user_has_team_role(): 사용자 팀 내 역할 확인\n\n**멤버 관리 권한 함수**\n- can_invite_member(): 멤버 초대 권한 확인 (captain+ 권한)\n- can_process_join_request(): 가입 신청 처리 권한 확인 (manager+ 권한)\n- can_change_member_role(): 멤버 역할 변경 권한 확인 (계층적 권한 검증)\n- can_remove_team_member(): 멤버 제거 권한 확인 (자기 탈퇴는 항상 허용)\n\n**감사 로그 시스템**\n- member_management_audit 테이블 생성\n- 모든 멤버 관리 작업 자동 로깅 트리거\n- RLS 정책으로 manager+ 만 조회 가능\n\n**적용된 RLS 정책**\n- team_members 테이블: 조회/삽입/업데이트/삭제 정책\n- team_invitations 테이블: 초대 관리 정책\n- member_management_audit 테이블: 감사 로그 접근 정책\n\n**유틸리티 함수**\n- cleanup_expired_invitations(): 만료된 초대 정리\n- verify_member_action_permission(): 권한 검증 헬퍼\n\n### 보안 특징\n- 계층적 권한 시스템 (자신보다 높은 권한은 관리 불가)\n- 모든 멤버 관리 작업 감사 로깅\n- 자기 자신은 언제나 탈퇴 가능\n- Owner 전용 소유권 이전 기능\n- 팀 최대 인원 제한 (50명)\n\n모든 마이그레이션이 Supabase 데이터베이스에 성공적으로 적용되어 멤버 관리 RLS 정책 구현이 완료되었습니다.\n</info added on 2025-05-31T08:18:48.598Z>",
          "status": "done"
        },
        {
          "id": 5,
          "title": "Establish RLS Testing and Validation Procedures",
          "description": "Set up systematic testing and validation processes to verify that all RLS policies enforce correct access controls and prevent unauthorized data access.",
          "dependencies": [
            1,
            2,
            3,
            4
          ],
          "details": "Develop test cases for each policy, covering both allowed and denied scenarios. Use Supabase's tools and manual queries to validate policy effectiveness and catch misconfigurations.\n<info added on 2025-05-31T08:33:08.051Z>\n✅ RLS 테스트 및 검증 절차 구현 완료\n\n## 구현된 테스트 프레임워크:\n\n### 1. 테스트 인프라\n- **테스트 결과 저장 테이블**: `rls_test_results`, `rls_test_scenarios`\n- **자동 정리 시스템**: 30일 후 테스트 결과 자동 삭제\n- **테스트 실행 프레임워크**: 체계적인 테스트 실행 및 결과 추적\n\n### 2. 핵심 테스트 함수들\n- **`run_comprehensive_rls_tests()`**: 종합적인 RLS 테스트 실행\n- **`check_rls_policies_status()`**: RLS 정책 상태 확인\n- **`check_rls_coverage()`**: 정책 커버리지 분석 (모든 테이블 100% 커버리지 확인)\n- **`scan_rls_vulnerabilities()`**: 보안 취약점 자동 스캔\n- **`run_quick_rls_test()`**: 빠른 상태 확인\n\n### 3. 성능 모니터링 시스템\n- **`analyze_rls_performance()`**: 정책 성능 분석\n- **복잡도 기반 성능 등급**: GOOD/MODERATE/NEEDS_OPTIMIZATION\n- **최적화 권장사항**: 인덱스 추가, 정책 단순화 제안\n\n### 4. 보안 취약점 관리\n- **심각도별 분류**: HIGH/MEDIUM/LOW\n- **자동 스캔 결과**: 1개 HIGH 취약점, 다수 MEDIUM 성능 개선 사항 식별\n- **권장사항 제공**: 구체적인 개선 방법 제시\n\n### 5. 테스트 카테고리별 검증\n- **팀 격리 테스트**: 팀 간 데이터 격리 확인\n- **역할 권한 테스트**: 계층적 권한 시스템 검증\n- **멤버 관리 테스트**: 멤버 초대/역할변경/제거 권한 확인\n- **경기 통계 테스트**: 경기 관리 및 통계 입력 권한 검증\n\n### 6. 문서화 및 가이드\n- **종합 테스트 가이드**: `docs/rls_testing_guide.md` 생성\n- **정기 검증 절차**: 일일/주간/월간 검증 프로세스 정의\n- **문제 해결 가이드**: 일반적인 문제 및 해결 방법\n- **모범 사례**: CI/CD 통합, 모니터링, 문서화 권장사항\n\n## 검증 결과:\n- ✅ 모든 테이블 RLS 활성화 확인\n- ✅ 100% 정책 커버리지 달성\n- ⚠️ 1개 HIGH 심각도 취약점 발견 (mercenary_requests 정책)\n- ⚠️ 다수 성능 최적화 기회 식별\n\n## 다음 단계:\n- HIGH 심각도 취약점 즉시 수정 필요\n- 성능 최적화를 위한 인덱스 추가 고려\n- CI/CD 파이프라인에 자동 테스트 통합\n</info added on 2025-05-31T08:33:08.051Z>",
          "status": "done"
        },
        {
          "id": 6,
          "title": "Optimize RLS Policies for Performance",
          "description": "Analyze and optimize RLS policies to ensure minimal performance overhead, following Supabase and PostgreSQL best practices.",
          "dependencies": [
            1,
            2,
            3,
            4,
            5
          ],
          "details": "Review policy conditions for efficiency, add indexes on columns used in RLS checks, and refactor complex logic to minimize query cost. Monitor query performance and adjust as needed.\n<info added on 2025-05-31T08:39:12.905Z>\nRLS 정책 성능 최적화 분석을 시작했습니다. 현재 48개의 활성 RLS 정책을 분석한 결과, 주요 성능 병목점을 식별했습니다: team_members 테이블에 대한 반복적인 서브쿼리, 복잡한 서브쿼리 패턴의 중복 사용, auth.uid() 함수의 빈번한 호출. 최적화 전략으로는 자주 사용되는 패턴에 대한 인덱스 추가, 함수 기반 정책을 통한 복잡도 감소, 성능 테스트를 통한 검증을 계획하고 있습니다.\n</info added on 2025-05-31T08:39:12.905Z>\n<info added on 2025-05-31T08:42:21.274Z>\nRLS 정책 성능 최적화 작업이 완료되었습니다. 10개의 전략적 인덱스를 추가하여 팀 멤버십 조회, 역할 기반 권한 체크, 매치 관련 쿼리를 최적화했습니다. 8개의 RLS 헬퍼 함수(get_user_teams, get_user_teams_with_role, user_can_access_match 등)를 구현하여 복잡한 서브쿼리를 단순화했습니다. external_teams, matches, match_attendances, match_stats 등 주요 테이블의 RLS 정책을 함수 기반으로 재작성했습니다. 성능 모니터링 시스템을 구축하여 정책 복잡도 분석, 인덱스 사용률 모니터링, 함수 성능 통계를 추적할 수 있게 되었습니다. 최종적으로 55개의 RLS 정책과 60개의 최적화된 인덱스를 관리하며, 평균 정책 복잡도를 86자로 감소시켰습니다. 이를 통해 team_members 테이블 조회 속도가 대폭 개선되고, 복잡한 서브쿼리 제거로 전반적인 쿼리 성능이 향상되었습니다.\n</info added on 2025-05-31T08:42:21.274Z>",
          "status": "done"
        }
      ]
    },
    {
      "id": 4,
      "title": "Social Authentication System",
      "description": "Implement Google and Kakao OAuth authentication using Supabase Auth",
      "details": "Configure Supabase Auth providers for Google and Kakao OAuth. Create authentication components: LoginPage, AuthCallback, ProtectedRoute wrapper. Implement auth state management with Zustand store. Setup automatic user profile creation on first login. Handle authentication errors and loading states.",
      "testStrategy": "Test Google and Kakao login flows, verify user session persistence, test logout functionality, validate automatic profile creation, and error handling scenarios.",
      "priority": "high",
      "dependencies": [
        1
      ],
      "status": "done",
      "subtasks": [
        {
          "id": 1,
          "title": "OAuth Provider Configuration",
          "description": "Set up and configure OAuth providers (Google and Kakao) including client credentials, redirect URIs, scopes, and provider-specific settings",
          "dependencies": [],
          "details": "Configure OAuth 2.0 settings for Google and Kakao providers, set up client IDs and secrets, define redirect URIs, configure required scopes for user data access, and implement provider-specific configuration management",
          "status": "done"
        },
        {
          "id": 2,
          "title": "Authentication UI Components and Flows",
          "description": "Develop user interface components for login, registration, and OAuth flows including buttons, forms, and redirect handling",
          "dependencies": [
            1
          ],
          "details": "Create login/signup forms, OAuth provider buttons, loading states, redirect handling components, and implement the complete authentication user experience flow",
          "status": "done"
        },
        {
          "id": 3,
          "title": "Auth State Management Implementation",
          "description": "Implement centralized authentication state management to track user authentication status, tokens, and user data across the application",
          "dependencies": [
            1
          ],
          "details": "Set up global auth state management using context/redux, implement actions for login/logout/token refresh, manage authentication state persistence, and provide auth state to components",
          "status": "done"
        },
        {
          "id": 4,
          "title": "User Session Handling and Persistence",
          "description": "Implement secure session management including token storage, refresh mechanisms, and session persistence across browser sessions",
          "dependencies": [
            3
          ],
          "details": "Implement secure token storage (localStorage/sessionStorage/cookies), automatic token refresh logic, session expiration handling, and cross-tab session synchronization",
          "status": "done"
        },
        {
          "id": 5,
          "title": "Authentication Error Handling and Recovery",
          "description": "Implement comprehensive error handling for authentication failures, network issues, and recovery mechanisms",
          "dependencies": [
            2,
            3,
            4
          ],
          "details": "Handle OAuth errors, network failures, token expiration, invalid credentials, rate limiting, and implement user-friendly error messages with recovery options and retry mechanisms",
          "status": "done"
        }
      ]
    },
    {
      "id": 5,
      "title": "User Profile Management",
      "description": "Create user profile creation and management system with position selection",
      "details": "Build ProfileSetup component for new users with fields: name, nickname, phone, position (GK, DF, MF, FW). Create ProfileEdit component for existing users. Implement profile validation and update functionality. Store profile data in users table with proper validation.",
      "testStrategy": "Test profile creation flow, validate form inputs, test profile updates, verify data persistence, and handle validation errors properly.",
      "priority": "medium",
      "dependencies": [
        4
      ],
      "status": "done",
      "subtasks": [
        {
          "id": 1,
          "title": "Profile Creation Form and Validation",
          "description": "Develop the initial profile creation form with comprehensive field validation, including required fields, data format checks, and real-time validation feedback for new user registration.",
          "dependencies": [],
          "details": "Create form components with input fields for basic profile information (name, email, phone, etc.), implement client-side and server-side validation rules, add error handling and user feedback mechanisms, and ensure accessibility compliance.",
          "status": "done"
        },
        {
          "id": 2,
          "title": "Profile Editing Interface",
          "description": "Build the profile editing interface that allows existing users to modify their profile information with intuitive UI/UX design and proper validation controls.",
          "dependencies": [
            1
          ],
          "details": "Design editable profile forms with pre-populated data, implement field-level editing capabilities, add save/cancel functionality, include confirmation dialogs for critical changes, and ensure consistent validation with creation form.",
          "status": "done"
        },
        {
          "id": 3,
          "title": "Profile Data Persistence and Updates",
          "description": "Implement backend data persistence layer for profile information including database operations, API endpoints, and data synchronization mechanisms.",
          "dependencies": [
            1
          ],
          "details": "Create database schema for profile data, develop CRUD API endpoints, implement data validation at database level, add transaction handling for data integrity, and create data migration scripts if needed.\n<info added on 2025-06-01T08:06:35.481Z>\n✅ 프로필 데이터 지속성 기능 구현 완료\n\n구현된 기능들:\n- createProfile: 새 사용자 프로필 생성 함수\n- getProfile: 사용자 프로필 조회 함수  \n- updateProfile: 프로필 업데이트 함수\n- checkNicknameAvailability: 닉네임 중복 확인 함수\n\n모든 함수들이 적절한 에러 핸들링과 함께 구현되었으며, Supabase와 연동되어 데이터베이스 CRUD 작업을 수행합니다. 트랜잭션 무결성도 Supabase의 PostgreSQL 기본 기능으로 보장됩니다.\n</info added on 2025-06-01T08:06:35.481Z>",
          "status": "done"
        },
        {
          "id": 4,
          "title": "Profile Completion Workflow for New Users",
          "description": "Design and implement a guided profile completion workflow that helps new users through the profile setup process with progress tracking and completion incentives.",
          "dependencies": [
            1,
            2,
            3
          ],
          "details": "Create multi-step profile completion wizard, implement progress indicators and completion tracking, add optional vs required field guidance, design completion rewards/notifications, and integrate with onboarding flow.\n<info added on 2025-06-01T08:09:55.426Z>\n✅ Profile completion workflow implementation completed\n\nImplemented features:\n1. **Progress Indicator**: Real-time progress bar displaying profile completion percentage\n2. **Field Status Display**: Visual completion status for each input field (✓, *, (optional))\n3. **Onboarding Component**: 4-step welcome guide for new users\n   - League Maker introduction\n   - Team features explanation  \n   - Match management guide\n   - Profile setup initiation\n4. **Smart Workflow**: \n   - Onboarding state saved to localStorage for direct profile form access on return visits\n   - Dynamic button text and activation state based on completion level\n   - Step-by-step guidance messages\n5. **Completion Tracking Function**: Utility to calculate profile completion and identify missing fields\n6. **User Experience Improvements**:\n   - Congratulatory message and next steps guidance upon completion\n   - Field-specific help text\n   - Smooth animations and visual feedback\n\nNew users now experience a complete workflow: onboarding → profile setup → completion celebration.\n</info added on 2025-06-01T08:09:55.426Z>",
          "status": "done"
        }
      ]
    },
    {
      "id": 6,
      "title": "Core UI Component Library",
      "description": "Build reusable UI components using TailwindCSS with mobile-first design",
      "details": "Create essential components: Button, Input, Modal, Card, Loading, Toast, Navigation, Header, Footer. Implement responsive design patterns for mobile-first approach. Setup component variants and proper TypeScript interfaces. Include accessibility features and consistent styling system.",
      "testStrategy": "Test components across different screen sizes, verify accessibility features, test component variants and props, ensure consistent styling and responsive behavior.",
      "priority": "medium",
      "dependencies": [
        1
      ],
      "status": "pending",
      "subtasks": [
        {
          "id": 1,
          "title": "Develop Basic Form Components",
          "description": "Implement reusable Button, Input, and Select components with consistent styling and API.",
          "dependencies": [],
          "details": "Ensure these components support common props, validation states, and theming.\n<info added on 2025-06-07T07:23:31.854Z>\n기본 폼 컴포넌트 구현이 완료되어 Layout 컴포넌트 개발을 시작할 수 있습니다.\n\n완료된 폼 컴포넌트들:\n- Button: 5가지 variant, 3가지 size, loading 상태, 접근성 지원\n- Input: variant/size 시스템, 아이콘 슬롯, 자동 ID 생성, TypeScript 타입 최적화\n- Select: Input과 일관된 디자인 시스템, 커스텀 드롭다운, 완전한 접근성\n\n유틸리티 인프라도 구축 완료 (cn 함수, clsx/tailwind-merge, 통합 export).\n\n이제 Card, Modal, Navigation 등 Layout 컴포넌트들을 동일한 디자인 시스템과 접근성 표준으로 구현해야 합니다.\n</info added on 2025-06-07T07:23:31.854Z>",
          "status": "done"
        },
        {
          "id": 2,
          "title": "Create Layout Components",
          "description": "Build Card, Modal, and Navigation components to structure application layouts.",
          "dependencies": [
            1
          ],
          "details": "Focus on flexible composition, slot support, and responsive behavior.\n<info added on 2025-06-07T07:25:50.342Z>\nLayout 컴포넌트 구현 완료:\n\n**구현된 컴포넌트들:**\n\n1. **Card 컴포넌트** (src/components/ui/Card.tsx):\n   - 4가지 variant: default, outlined, elevated, flat\n   - 3가지 size: sm, md, lg\n   - 유연한 composition을 위한 서브 컴포넌트들: CardHeader, CardContent, CardFooter, CardTitle, CardDescription\n   - hover 효과 지원\n   - 커스터마이즈 가능한 padding 시스템\n\n2. **Modal 컴포넌트** (src/components/ui/Modal.tsx):\n   - 완전한 접근성 지원 (focus 관리, ESC 키, ARIA)\n   - 5가지 size: sm, md, lg, xl, full\n   - Portal을 사용한 올바른 DOM 렌더링\n   - 스크롤 잠금 및 오버레이 클릭 처리\n   - 서브 컴포넌트: ModalHeader, ModalContent, ModalFooter, ModalTitle, ModalDescription\n\n3. **Navigation 컴포넌트** (src/components/ui/Navigation.tsx):\n   - 다양한 네비게이션 패턴 지원: Navigation (horizontal, vertical, mobile variants), HeaderNavigation, MobileNavigation (햄버거 메뉴와 사이드 드로어), BottomNavigation (모바일 하단 탭)\n   - NavigationItem 인터페이스로 일관된 아이템 구조\n   - 아이콘과 라벨 표시 옵션\n   - 활성 상태 및 비활성화 상태 지원\n\n**주요 특징:**\n- 모든 컴포넌트가 mobile-first 반응형 디자인\n- 일관된 디자인 시스템 (색상, 간격, 둥근 모서리 등)\n- forwardRef를 통한 ref 전달 지원\n- TypeScript로 강타입 지원\n- 접근성 best practices 적용\n</info added on 2025-06-07T07:25:50.342Z>",
          "status": "done"
        },
        {
          "id": 3,
          "title": "Implement Feedback Components",
          "description": "Develop Toast, Loading (Spinner/Skeleton), and Alert components for user feedback.",
          "dependencies": [
            1
          ],
          "details": "Ensure accessibility, animation, and easy integration with application state.",
          "status": "pending"
        },
        {
          "id": 4,
          "title": "Integrate Responsive Design System",
          "description": "Establish a responsive design system to ensure all components adapt to various screen sizes.",
          "dependencies": [
            2,
            3
          ],
          "details": "Define breakpoints, spacing, and responsive utilities for consistent layouts.",
          "status": "pending"
        },
        {
          "id": 5,
          "title": "Add Accessibility Features",
          "description": "Integrate accessibility best practices across all components.",
          "dependencies": [
            4
          ],
          "details": "Implement ARIA roles, keyboard navigation, and color contrast compliance.",
          "status": "pending"
        },
        {
          "id": 6,
          "title": "Document and Test Components",
          "description": "Create comprehensive documentation and automated tests for all components.",
          "dependencies": [
            5
          ],
          "details": "Provide usage examples, API references, and ensure high test coverage.",
          "status": "pending"
        }
      ]
    },
    {
      "id": 7,
      "title": "Team Creation and Basic Management",
      "description": "Implement team creation functionality with automatic 구단주 role assignment",
      "details": "Create TeamCreation component with fields: team name, description, region, activity_info. Implement automatic 구단주 role assignment to team creator. Setup team validation and creation logic. Create basic team dashboard view. Implement team_members relationship creation.",
      "testStrategy": "Test team creation flow, verify 구단주 role assignment, validate team data persistence, test team dashboard access, and handle creation errors.",
      "priority": "high",
      "dependencies": [
        5,
        6
      ],
      "status": "pending",
      "subtasks": [
        {
          "id": 1,
          "title": "Team Creation Form and Validation",
          "description": "Design and implement a user interface form for creating a new team, including input fields for team name, description, and initial members. Implement validation logic to ensure all required fields are correctly filled and data integrity is maintained.",
          "dependencies": [],
          "details": "This subtask covers both the frontend form and backend validation logic to prevent invalid or incomplete team creation requests.",
          "status": "pending"
        },
        {
          "id": 2,
          "title": "Automatic Role Assignment Logic",
          "description": "Develop logic to automatically assign roles (e.g., team leader, member) to users upon team creation based on predefined rules or input from the creation form.",
          "dependencies": [
            1
          ],
          "details": "This includes implementing backend logic to ensure each team member receives the correct role and permissions upon team creation.",
          "status": "pending"
        },
        {
          "id": 3,
          "title": "Team Dashboard Interface",
          "description": "Create a dashboard interface for teams, displaying relevant information such as team members, roles, recent activity, and management options.",
          "dependencies": [
            1,
            2
          ],
          "details": "The dashboard should provide an overview of the team and allow for basic interactions such as viewing member details and accessing team management features.",
          "status": "pending"
        },
        {
          "id": 4,
          "title": "Team Data Management Operations",
          "description": "Implement backend operations for managing team data, including creating, updating, deleting teams, and modifying team membership and roles.",
          "dependencies": [
            1,
            2,
            3
          ],
          "details": "This subtask ensures robust CRUD operations for teams and supports ongoing team management through the dashboard.",
          "status": "pending"
        }
      ]
    },
    {
      "id": 8,
      "title": "Role-Based Permission System",
      "description": "Implement hierarchical role system (구단주 > 운영진 > 주장 > 일반멤버)",
      "details": "Define role hierarchy and permissions matrix. Create role management utilities and hooks. Implement permission checking for UI components and API calls. Setup role assignment and modification functionality for authorized users. Create role-based navigation and feature access.",
      "testStrategy": "Test role hierarchy enforcement, verify permission checks work correctly, test role assignment/modification, validate UI elements show/hide based on roles.",
      "priority": "high",
      "dependencies": [
        7
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 9,
      "title": "Home Stadium Management System",
      "description": "Implement mandatory home stadium registration and management",
      "details": "Create StadiumRegistration component with fields: name, address, coordinates. Implement map integration for location selection. Setup mandatory stadium registration before team activation. Create stadium management interface for adding/editing/deleting stadiums. Implement favorite stadiums functionality.",
      "testStrategy": "Test stadium registration flow, verify mandatory requirement enforcement, test map integration, validate stadium CRUD operations, and test favorite stadium functionality.",
      "priority": "high",
      "dependencies": [
        8
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 10,
      "title": "Team Search and Join System",
      "description": "Implement team discovery and membership request system",
      "details": "Create TeamSearch component with region-based filtering. Implement team discovery with pagination. Create join request system with approval/rejection workflow. Setup notification system for join requests. Implement team listing with basic information display.",
      "testStrategy": "Test team search functionality, verify filtering works, test join request flow, validate approval/rejection process, and test notification delivery.",
      "priority": "medium",
      "dependencies": [
        9
      ],
      "status": "pending",
      "subtasks": [
        {
          "id": 1,
          "title": "Team Discovery and Search Interface",
          "description": "Design and implement a user-friendly search interface for discovering teams",
          "dependencies": [],
          "details": "Create an intuitive search interface with faceted navigation, autocomplete functionality, and relevance ranking. Include filters for team categories, availability, and other relevant parameters. Implement exploratory search features to help users discover teams they might not have specifically searched for.",
          "status": "pending"
        },
        {
          "id": 2,
          "title": "Join Request Submission System",
          "description": "Develop a system for users to submit requests to join teams",
          "dependencies": [
            1
          ],
          "details": "Create a streamlined submission form accessible from team profile pages. Include fields for user information, reason for joining, and relevant qualifications. Implement validation to ensure complete submissions and prevent duplicate requests.",
          "status": "pending"
        },
        {
          "id": 3,
          "title": "Request Approval/Rejection Workflow",
          "description": "Build a workflow system for team administrators to review and process join requests",
          "dependencies": [
            2
          ],
          "details": "Develop an admin dashboard showing pending requests with sorting and filtering options. Create interfaces for reviewing applicant details, approving or rejecting requests with reason codes, and managing request queues. Implement status tracking throughout the approval process.",
          "status": "pending"
        },
        {
          "id": 4,
          "title": "Notification System for Join Requests",
          "description": "Implement a notification system to keep users informed about request status",
          "dependencies": [
            2,
            3
          ],
          "details": "Create notification mechanisms for both requesters and team administrators. Send alerts for new requests, status changes, approvals, and rejections. Implement multiple notification channels (in-app, email, etc.) with user preference settings.",
          "status": "pending"
        }
      ]
    },
    {
      "id": 11,
      "title": "Member Management System",
      "description": "Implement comprehensive member management with approval and role assignment",
      "details": "Create MemberManagement dashboard for team administrators. Implement member approval/rejection functionality. Create role assignment interface. Setup member removal/kick functionality. Implement member list with role indicators and management actions.",
      "testStrategy": "Test member approval/rejection flow, verify role assignment works, test member removal functionality, validate permission checks for management actions.",
      "priority": "medium",
      "dependencies": [
        10
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 12,
      "title": "External Team Management",
      "description": "Implement system for managing non-registered teams and their information",
      "details": "Create ExternalTeam registration component with fields: name, region, contact info. Implement external team CRUD operations. Setup external team listing and search. Create external team profile pages. Implement team-specific external team management (each team manages their own external teams).",
      "testStrategy": "Test external team registration, verify CRUD operations, test team-specific data isolation, validate external team profiles, and test search functionality.",
      "priority": "medium",
      "dependencies": [
        11
      ],
      "status": "pending",
      "subtasks": [
        {
          "id": 1,
          "title": "External Team Registration and Profile Creation",
          "description": "Design and implement the process for registering new external teams and creating their profiles, including capturing essential team information and member details.",
          "dependencies": [],
          "details": "This includes UI/UX for registration forms, backend logic for storing team profiles, and validation of input data.",
          "status": "pending"
        },
        {
          "id": 2,
          "title": "External Team CRUD Operations",
          "description": "Develop Create, Read, Update, and Delete (CRUD) functionalities for managing external teams and their profiles.",
          "dependencies": [
            1
          ],
          "details": "Ensure that teams can be edited, updated, or deleted as needed, and that all changes are reflected in the system.",
          "status": "pending"
        },
        {
          "id": 3,
          "title": "External Team Search and Listing",
          "description": "Implement search and listing features to allow users to find and view external teams based on various criteria.",
          "dependencies": [
            2
          ],
          "details": "This includes building efficient search algorithms, filters, and paginated listings for external teams.",
          "status": "pending"
        },
        {
          "id": 4,
          "title": "Team-Specific External Team Data Isolation",
          "description": "Ensure that each external team only has access to its own data and cannot view or modify data belonging to other teams.",
          "dependencies": [
            1,
            2,
            3
          ],
          "details": "Implement access control mechanisms and data partitioning strategies to enforce strict data isolation between teams.",
          "status": "pending"
        }
      ]
    },
    {
      "id": 13,
      "title": "Match Creation and Management",
      "description": "Implement match creation with home stadium selection and opponent configuration",
      "details": "Create MatchCreation component with home stadium selection (mandatory), opponent selection (registered team vs external team), date/time picker. Implement match type differentiation. Setup match validation and creation logic. Create match listing and detail views.",
      "testStrategy": "Test match creation flow, verify home stadium requirement, test opponent selection for both registered and external teams, validate date/time handling.",
      "priority": "high",
      "dependencies": [
        "11",
        "12"
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 14,
      "title": "Match Attendance Management",
      "description": "Implement attendance tracking for regular members and mercenaries",
      "details": "Create AttendanceManagement component for match organizers. Implement member attendance status tracking (attending/not attending/maybe). Setup mercenary addition functionality. Create real-time attendance counter. Implement attendance status updates with real-time sync.",
      "testStrategy": "Test attendance status updates, verify real-time synchronization, test mercenary addition, validate attendance counting, and test status change notifications.",
      "priority": "high",
      "dependencies": [
        13
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 15,
      "title": "Real-time Updates System",
      "description": "Implement Supabase real-time subscriptions for live attendance and match updates",
      "details": "Setup Supabase real-time subscriptions for match_attendances table. Implement real-time attendance updates in UI. Create real-time notification system for match changes. Setup connection management and error handling for real-time features.",
      "testStrategy": "Test real-time attendance updates across multiple clients, verify subscription management, test connection recovery, and validate notification delivery.",
      "priority": "medium",
      "dependencies": [
        14
      ],
      "status": "deferred",
      "subtasks": []
    },
    {
      "id": 16,
      "title": "Match Statistics Input System",
      "description": "Implement goal and assist tracking for players including mercenaries",
      "details": "Create MatchStats input component for post-match data entry. Implement player selection (members + mercenaries) with goal/assist counters. Setup match result recording. Create stats validation and submission logic. Implement edit functionality for match organizers.",
      "testStrategy": "Test stats input for both members and mercenaries, verify data validation, test stats editing, validate submission process, and test result calculation.",
      "priority": "medium",
      "dependencies": [
        15
      ],
      "status": "deferred",
      "subtasks": [
        {
          "id": 1,
          "title": "Design Match Statistics Input Interface",
          "description": "Create a user-friendly interface for inputting match statistics with clear layouts and progressive disclosure of data fields",
          "dependencies": [],
          "details": "Develop a clean, organized layout with 60% white space for better readability. Implement color-coded team bars and collapsible sections to prevent overwhelming users with complex data. Include basic match information fields prominently while allowing deeper statistical inputs through expandable sections.",
          "status": "pending"
        },
        {
          "id": 2,
          "title": "Implement Player Selection and Stats Tracking",
          "description": "Build functionality for selecting players and tracking their individual statistics throughout a match",
          "dependencies": [
            1
          ],
          "details": "Create a player roster system with quick-select options for active players. Design real-time stat tracking components that update without full page reloads. Include templates for different sports with sport-specific statistics fields. Implement a multi-agent tracking system for team sports that maintains context between players.",
          "status": "pending"
        },
        {
          "id": 3,
          "title": "Develop Stats Validation and Submission System",
          "description": "Create validation rules for statistical inputs and build a secure submission process",
          "dependencies": [
            1,
            2
          ],
          "details": "Implement client-side validation to catch common errors before submission. Create server-side validation rules to ensure data integrity and prevent impossible statistical combinations. Design a confirmation system that summarizes entered stats before final submission. Include progress indicators for multi-step submission processes.",
          "status": "pending"
        },
        {
          "id": 4,
          "title": "Build Stats Editing and Correction Features",
          "description": "Develop functionality to edit, correct, and update previously entered statistics",
          "dependencies": [
            3
          ],
          "details": "Create an interface for reviewing submitted statistics with clear highlighting of editable fields. Implement version control to track changes to statistics over time. Design an approval workflow for corrections that might affect aggregated team statistics. Include batch editing capabilities for efficient corrections across multiple players or events.",
          "status": "pending"
        }
      ]
    },
    {
      "id": 17,
      "title": "Personal Statistics Dashboard",
      "description": "Implement individual player statistics and attendance rate tracking",
      "details": "Create PersonalStats dashboard showing individual goals, assists, attendance rate, and match history. Implement team-specific stats filtering. Setup stats calculation functions. Create visual charts for stats display. Implement stats comparison features.",
      "testStrategy": "Test stats calculation accuracy, verify team-specific filtering, test chart rendering, validate attendance rate calculation, and test stats history.",
      "priority": "medium",
      "dependencies": [
        16
      ],
      "status": "deferred",
      "subtasks": [
        {
          "id": 1,
          "title": "Individual Statistics Calculation and Display",
          "description": "Develop functionality to calculate and display personal statistics for each user, such as performance metrics, scores, or activity counts.",
          "dependencies": [],
          "details": "This includes aggregating raw data into meaningful statistics and presenting them in a user-friendly format.",
          "status": "pending"
        },
        {
          "id": 2,
          "title": "Attendance Rate Tracking",
          "description": "Implement a system to track and calculate attendance rates for individuals over a specified period.",
          "dependencies": [
            1
          ],
          "details": "Attendance data should be collected, stored, and used to compute attendance percentages or trends for each user.",
          "status": "pending"
        },
        {
          "id": 3,
          "title": "Team-Specific Stats Filtering",
          "description": "Enable filtering of personal statistics based on team membership or participation.",
          "dependencies": [
            1
          ],
          "details": "Users should be able to view their stats within the context of specific teams, allowing for more granular analysis.",
          "status": "pending"
        },
        {
          "id": 4,
          "title": "Visual Charts and Analytics",
          "description": "Create visual representations (charts, graphs, dashboards) of personal and team statistics for easier analysis and interpretation.",
          "dependencies": [
            1,
            2,
            3
          ],
          "details": "Utilize data visualization libraries to present trends, comparisons, and progress over time.",
          "status": "pending"
        },
        {
          "id": 5,
          "title": "Stats Comparison Features",
          "description": "Develop features that allow users to compare their statistics with others or with team averages.",
          "dependencies": [
            1,
            3,
            4
          ],
          "details": "This includes side-by-side comparisons, ranking, and highlighting differences or improvements.",
          "status": "pending"
        }
      ]
    },
    {
      "id": 18,
      "title": "Team Statistics and Records",
      "description": "Implement team-level statistics and win/loss records against external teams",
      "details": "Create TeamStats dashboard with overall team performance. Implement external team records (win/loss/draw, goals for/against). Setup team ranking and comparison features. Create season-based stats filtering. Implement team performance analytics.",
      "testStrategy": "Test team stats aggregation, verify external team records accuracy, test ranking calculations, validate season filtering, and test performance analytics.",
      "priority": "medium",
      "dependencies": [
        17
      ],
      "status": "deferred",
      "subtasks": []
    },
    {
      "id": 19,
      "title": "Mercenary Management System",
      "description": "Implement comprehensive mercenary tracking and management",
      "details": "Create MercenaryPool management for tracking all mercenaries. Implement mercenary profile creation with contact info, position, rating. Setup mercenary stats tracking across matches. Create mercenary search and invitation system. Implement mercenary performance analytics.",
      "testStrategy": "Test mercenary profile creation, verify stats tracking across matches, test search functionality, validate invitation system, and test performance analytics.",
      "priority": "medium",
      "dependencies": [
        18
      ],
      "status": "deferred",
      "subtasks": []
    },
    {
      "id": 20,
      "title": "Multi-team Support System",
      "description": "Implement support for users belonging to multiple teams",
      "details": "Create team switching interface in navigation. Implement primary team designation. Setup team-specific dashboards and data filtering. Create unified schedule view across all teams. Implement team conflict detection for overlapping matches.",
      "testStrategy": "Test team switching functionality, verify data isolation between teams, test unified schedule view, validate conflict detection, and test primary team features.",
      "priority": "medium",
      "dependencies": [
        19
      ],
      "status": "deferred",
      "subtasks": []
    },
    {
      "id": 21,
      "title": "Notification and Announcement System",
      "description": "Implement team announcements and notification management",
      "details": "Create Announcement creation and management for team administrators. Implement notification system for match updates, join requests, and announcements. Setup notification preferences and settings. Create notification history and read status tracking.",
      "testStrategy": "Test announcement creation and distribution, verify notification delivery, test notification preferences, validate read status tracking, and test notification history.",
      "priority": "medium",
      "dependencies": [
        20
      ],
      "status": "deferred",
      "subtasks": [
        {
          "id": 1,
          "title": "Design Announcement Creation and Management Interface",
          "description": "Develop an administrative interface for creating, editing, scheduling, and managing announcements that will be sent as notifications.",
          "dependencies": [],
          "details": "This includes UI/UX for announcement input, scheduling options, editing capabilities, and administrative controls for publishing or retracting announcements.",
          "status": "pending"
        },
        {
          "id": 2,
          "title": "Implement Notification Delivery and Targeting System",
          "description": "Build the backend services responsible for queuing, delivering, and targeting notifications to the appropriate users across multiple channels (email, SMS, push, etc.).",
          "dependencies": [
            1
          ],
          "details": "This involves integrating with message queues, defining delivery channels, and implementing logic for targeting users based on announcement metadata and user segmentation.",
          "status": "pending"
        },
        {
          "id": 3,
          "title": "Develop Notification Preferences and Settings Module",
          "description": "Create a user-facing module that allows users to set and manage their notification preferences, including opt-in/out options and channel selection.",
          "dependencies": [
            2
          ],
          "details": "This module should store and enforce user preferences, such as notification types, frequency limits, and preferred delivery channels, ensuring compliance during notification delivery.",
          "status": "pending"
        },
        {
          "id": 4,
          "title": "Implement Notification History and Read Status Tracking",
          "description": "Build the system to record notification delivery history and track read/unread status for each user.",
          "dependencies": [
            3
          ],
          "details": "This includes database schema for notification logs, APIs for querying notification history, and mechanisms for marking notifications as read or unread.",
          "status": "pending"
        }
      ]
    },
    {
      "id": 22,
      "title": "Mobile UI/UX Optimization",
      "description": "Implement basic responsive design and mobile compatibility for MVP",
      "status": "pending",
      "dependencies": [
        11
      ],
      "priority": "medium",
      "details": "Focus on essential mobile compatibility for MVP release. Implement basic responsive components and touch-friendly interactions. Advanced mobile optimization features including offline functionality, advanced gestures, and performance optimization will be deferred to post-MVP phases.",
      "testStrategy": "Test basic responsive layouts on various mobile devices and screen sizes, verify touch interactions work properly, and validate mobile compatibility across different browsers.",
      "subtasks": [
        {
          "id": 1,
          "title": "Basic Responsive Component Implementation",
          "description": "Implement fundamental responsive design for all UI components to ensure basic mobile compatibility and usability.",
          "dependencies": [],
          "details": "Implement essential breakpoints for mobile, tablet, and desktop views. Ensure components scale appropriately and maintain basic functionality across different screen sizes. Focus on core responsive behavior rather than advanced optimizations.",
          "status": "pending"
        },
        {
          "id": 2,
          "title": "Touch-Friendly Interaction Implementation",
          "description": "Design and implement UI elements that are easily accessible and operable via touch input, minimizing accidental taps and improving user experience.",
          "dependencies": [
            1
          ],
          "details": "Increase button sizes, provide adequate spacing between interactive elements, and ensure all controls are reachable with a thumb. Avoid small or closely packed touch targets.",
          "status": "pending"
        },
        {
          "id": 3,
          "title": "Basic Mobile Navigation Setup",
          "description": "Implement simple mobile navigation patterns to ensure core functionality is accessible on mobile devices.",
          "dependencies": [
            1,
            2
          ],
          "details": "Implement basic mobile-friendly navigation (e.g., simple hamburger menu or responsive navigation bar). Focus on essential navigation functionality rather than advanced mobile patterns.",
          "status": "pending"
        },
        {
          "id": 7,
          "title": "Deferred: Advanced Performance Optimization",
          "description": "Advanced mobile performance optimization features to be implemented in post-MVP phase.",
          "dependencies": [],
          "details": "This includes image compression, lazy loading, advanced caching strategies, and network optimization. Will be implemented after MVP release.",
          "status": "deferred"
        },
        {
          "id": 8,
          "title": "Deferred: Offline Functionality Implementation",
          "description": "Offline-first features and service worker implementation to be added in post-MVP phase.",
          "dependencies": [],
          "details": "Implementation of service workers, offline caching, and offline-first functionality will be handled in future iterations after MVP release.",
          "status": "deferred"
        },
        {
          "id": 9,
          "title": "Deferred: Advanced Mobile Gestures",
          "description": "Advanced mobile-specific gesture integration to be implemented in post-MVP phase.",
          "dependencies": [],
          "details": "Advanced gestures like swipe, pinch, tap-and-hold will be implemented in future iterations. MVP will focus on basic touch interactions only.",
          "status": "deferred"
        }
      ]
    },
    {
      "id": 23,
      "title": "Data Migration and Import Tools",
      "description": "Create tools for importing existing team data from spreadsheets",
      "details": "Create CSV/Excel import functionality for team members, match history, and stats. Implement data validation and error handling for imports. Setup data mapping interface for flexible import. Create export functionality for backup purposes.",
      "testStrategy": "Test import functionality with various file formats, verify data validation, test error handling for malformed data, validate export functionality, and test data integrity.",
      "priority": "low",
      "dependencies": [
        22
      ],
      "status": "deferred",
      "subtasks": []
    },
    {
      "id": 24,
      "title": "Performance Optimization and Caching",
      "description": "Implement comprehensive performance optimization and caching strategies",
      "details": "Implement client-side caching with SWR or React Query. Setup image optimization with Next.js Image component. Implement code splitting and lazy loading. Setup database query optimization. Implement CDN integration for static assets.",
      "testStrategy": "Test loading performance across different network conditions, verify caching behavior, test image optimization, validate code splitting, and measure performance metrics.",
      "priority": "medium",
      "dependencies": [
        23
      ],
      "status": "deferred",
      "subtasks": [
        {
          "id": 1,
          "title": "Client-Side Caching Implementation",
          "description": "Implement browser caching strategies to store static resources (images, CSS, JavaScript) on the user's device, reducing server requests and improving load times for repeat visits.",
          "dependencies": [],
          "details": "Configure cache-control headers and set appropriate expiration policies for static assets. Ensure that frequently used resources are cached efficiently to minimize redundant downloads.",
          "status": "pending"
        },
        {
          "id": 2,
          "title": "Image and Asset Optimization",
          "description": "Optimize images and other static assets to reduce file sizes without compromising quality, ensuring faster page loads and improved performance.",
          "dependencies": [],
          "details": "Use tools like TinyPNG or ImageOptim for image compression, and minify CSS, JavaScript, and HTML files to remove unnecessary characters and whitespace.",
          "status": "pending"
        },
        {
          "id": 3,
          "title": "Code Splitting and Lazy Loading",
          "description": "Implement code splitting and lazy loading techniques to load only the necessary code and assets when required, reducing initial load times and improving perceived performance.",
          "dependencies": [],
          "details": "Utilize modern JavaScript frameworks' built-in code splitting features and defer loading of non-critical resources until they are needed by the user.",
          "status": "pending"
        },
        {
          "id": 4,
          "title": "Database Query Optimization",
          "description": "Analyze and optimize database queries to reduce latency and improve backend response times, ensuring efficient data retrieval for dynamic content.",
          "dependencies": [],
          "details": "Review query execution plans, add appropriate indexes, and refactor inefficient queries to minimize database load and speed up data access.",
          "status": "pending"
        },
        {
          "id": 5,
          "title": "CDN Integration and Static Asset Management",
          "description": "Integrate a Content Delivery Network (CDN) to distribute static assets globally, reducing latency and improving load times for users regardless of their geographic location.",
          "dependencies": [],
          "details": "Configure CDN caching rules, manage asset versioning, and ensure that static files are served from edge locations closest to the user.",
          "status": "pending"
        }
      ]
    },
    {
      "id": 25,
      "title": "Testing and Quality Assurance",
      "description": "Implement comprehensive testing suite and quality assurance processes",
      "details": "Setup unit testing with Jest and React Testing Library. Implement integration tests for critical user flows. Create end-to-end tests with Playwright or Cypress. Setup automated testing pipeline. Implement error monitoring and logging. Create user acceptance testing procedures.",
      "testStrategy": "Achieve 80%+ test coverage, verify all critical user flows work correctly, test error scenarios and edge cases, validate performance benchmarks, and ensure accessibility compliance.",
      "priority": "medium",
      "dependencies": [
        24
      ],
      "status": "deferred",
      "subtasks": []
    },
    {
      "id": 26,
      "title": "Implement External Team Data Succession System",
      "description": "Develop a system to automatically transfer and link historical match data, statistics, and opponent records from external teams to newly registered teams upon official registration, with admin approval and rollback features.",
      "details": "Design and implement a data succession workflow triggered when an external team completes official registration. Build a matching engine to associate external team records with the new team, using fuzzy matching on team names and metadata, and provide an admin interface for reviewing and approving matches. Upon approval, transfer all relevant match records, statistics, and opponent histories to the new team, ensuring data integrity and preventing duplication. Implement audit logging for all succession actions, including a rollback mechanism to revert changes if necessary. Integrate validation checks to prevent erroneous or duplicate data transfers. Ensure the system is extensible for future enhancements and complies with existing team and match management modules.",
      "testStrategy": "1. Create test cases for various external team registration scenarios, including similar and ambiguous team names. 2. Verify that, upon admin approval, all historical match data, statistics, and opponent records are correctly transferred and linked to the new team without duplication. 3. Test the admin approval workflow, ensuring incorrect matches can be rejected and only approved matches trigger data transfer. 4. Validate the audit log records all actions and that the rollback feature restores the previous state accurately. 5. Perform data integrity checks post-succession to ensure no orphaned or duplicated records exist. 6. Conduct regression testing to confirm no impact on existing team and match management functionalities.",
      "status": "pending",
      "dependencies": [
        12,
        13
      ],
      "priority": "high",
      "subtasks": [
        {
          "id": 1,
          "title": "Develop Team Matching Algorithm",
          "description": "Design and implement an algorithm to match external teams with newly registered teams using fuzzy matching on team names, region, and contact information.",
          "dependencies": [],
          "details": "The algorithm should leverage similarity metrics and metadata to suggest potential matches between external and registered teams, minimizing false positives and negatives.",
          "status": "pending",
          "testStrategy": "Test with a dataset of known team variations to ensure accurate matching and low error rates."
        },
        {
          "id": 2,
          "title": "Implement Data Succession Process",
          "description": "Build the workflow to transfer historical match data, statistics, and player records from matched external teams to the newly registered teams.",
          "dependencies": [
            1
          ],
          "details": "Ensure all relevant data types are included and mapped correctly, supporting extensibility for future data types.",
          "status": "pending",
          "testStrategy": "Verify data transfer completeness and correctness using sample data and edge cases."
        },
        {
          "id": 3,
          "title": "Create Admin Approval Workflow",
          "description": "Develop an interface and process for administrators to review, approve, or reject proposed team matches and data succession actions.",
          "dependencies": [
            1,
            2
          ],
          "details": "Admins should be able to view suggested matches, inspect data to be transferred, and approve or deny each succession request.",
          "status": "pending",
          "testStrategy": "Simulate admin review scenarios to ensure all actions are logged and only approved matches proceed."
        },
        {
          "id": 4,
          "title": "Integrate Data Integrity Validation",
          "description": "Implement validation checks to prevent erroneous or duplicate data transfers during the succession process.",
          "dependencies": [
            2
          ],
          "details": "Checks should include duplicate detection, data consistency, and referential integrity across all transferred records.",
          "status": "pending",
          "testStrategy": "Run automated tests with intentionally malformed and duplicate data to confirm validation effectiveness."
        },
        {
          "id": 5,
          "title": "Implement Audit Logging and Rollback Mechanism",
          "description": "Build a system to log all succession actions and provide a rollback feature to revert data transfers if necessary.",
          "dependencies": [
            2,
            3,
            4
          ],
          "details": "Ensure every action is auditable and that rollbacks restore the system to its previous state without data loss.",
          "status": "pending",
          "testStrategy": "Perform succession and rollback operations in test environments to confirm full reversibility and audit trail accuracy."
        },
        {
          "id": 6,
          "title": "Develop User Interface for Succession Management",
          "description": "Design and implement user interfaces for submitting succession requests, admin approvals, and viewing succession history.",
          "dependencies": [
            1,
            2,
            3,
            5
          ],
          "details": "Interfaces should be intuitive for both admins and users, supporting all workflow steps and displaying relevant status and history.",
          "status": "pending",
          "testStrategy": "Conduct usability testing with target users and verify all UI elements trigger the correct backend processes."
        }
      ]
    },
    {
      "id": 27,
      "title": "QR Code Integration System for External Teams and Mercenaries",
      "description": "Implement a comprehensive QR code-based authentication system that allows external teams and mercenaries to integrate their historical records when joining the platform as registered users.",
      "details": "Create a multi-component integration system with the following key implementations:\n\n1. **Matching Code Generation Service**: Develop a unique code generator that creates cryptographically secure matching codes for external teams and mercenaries. Implement QR code generation using libraries like qrcode.js, storing codes in a secure mapping table with expiration timestamps.\n\n2. **Integration Request Interface**: Build a user-friendly form where new registrants can input matching codes or scan QR codes. Create validation logic to verify code authenticity and check expiration status. Implement real-time feedback for code validation.\n\n3. **Bidirectional Authentication System**: Develop a two-step approval process where the original team administrator must approve the integration request. Create notification system to alert administrators of pending integration requests. Implement secure token-based authentication for the approval process.\n\n4. **Data Integration Engine**: Build comprehensive data migration logic that safely transfers match records, statistics, attendance data, and performance metrics from external/mercenary profiles to registered user accounts. Implement conflict resolution algorithms for overlapping data periods.\n\n5. **Audit and Rollback System**: Create detailed logging for all integration operations including timestamps, data transferred, and approval chains. Implement rollback functionality that can safely reverse integrations if issues are discovered. Store backup snapshots before each integration.\n\n6. **Data Integrity Verification**: Develop validation checks to ensure statistical consistency after integration (total goals, match counts, etc.). Implement automated conflict detection for impossible scenarios (same player in multiple matches simultaneously). Create data reconciliation reports for administrators.\n\nTechnical considerations: Use database transactions for atomic operations, implement rate limiting for integration requests, create secure API endpoints with proper authentication, and ensure GDPR compliance for data transfers.",
      "testStrategy": "Verify QR code generation produces valid, scannable codes that correctly link to matching records. Test the complete integration workflow from code generation through final data merge, ensuring all historical records transfer accurately. Validate the bidirectional authentication by testing approval/rejection scenarios and confirming proper notification delivery. Test data integrity by creating scenarios with conflicting records and verifying resolution mechanisms work correctly. Verify rollback functionality by performing integrations and successfully reversing them without data loss. Test edge cases including expired codes, duplicate integration attempts, and concurrent approval requests. Perform load testing on the integration system with multiple simultaneous requests. Validate audit logs capture all required information and can be used for compliance reporting.",
      "status": "pending",
      "dependencies": [
        12,
        19
      ],
      "priority": "medium",
      "subtasks": [
        {
          "id": 1,
          "title": "Design QR Code Authentication Architecture",
          "description": "Create a comprehensive architecture design for the QR code authentication system that aligns with security best practices and supports external team integration.",
          "dependencies": [],
          "details": "Define the overall system architecture including authentication flow, security protocols, and data storage requirements. Specify PIN length (8-20 digits) and QR code lifetime (recommended 200-365 days). Include components for QR code generation, verification, and secure communication channels between primary and secondary devices. Consider implementing the five-state SQRAP protocol: awaiting login request, login pending, QR code displayed, QR code payload verified, and login complete.",
          "status": "pending",
          "testStrategy": "Conduct architecture review sessions with security experts to validate the design against industry standards and potential vulnerabilities."
        },
        {
          "id": 2,
          "title": "Implement Secure QR Code Generation Service",
          "description": "Develop the service responsible for generating cryptographically secure QR codes with appropriate expiration policies and secure storage mechanisms.",
          "dependencies": [
            1
          ],
          "details": "Build a service using qrcode.js that generates unique, cryptographically secure QR codes for external teams and mercenaries. Implement secure storage in a mapping table with expiration timestamps. Ensure QR codes contain necessary authentication data while maintaining security. Include functionality to replace lost or stolen QR codes. Implement configurable PIN length and QR code lifetime settings as defined in the architecture.",
          "status": "pending",
          "testStrategy": "Test QR code generation with various parameters, verify cryptographic strength, and validate proper expiration handling."
        },
        {
          "id": 3,
          "title": "Develop Integration Request Interface",
          "description": "Create a user-friendly interface for new registrants to input matching codes or scan QR codes with real-time validation feedback.",
          "dependencies": [
            2
          ],
          "details": "Build a responsive web interface that allows users to either manually input matching codes or scan QR codes using device cameras. Implement client-side and server-side validation to verify code authenticity and check expiration status. Provide real-time feedback on validation status and clear error messages. Ensure the interface works across different devices and browsers. Include accessibility features for users with disabilities.",
          "status": "pending",
          "testStrategy": "Conduct usability testing with representative users, test across multiple devices and browsers, and verify validation logic with valid and invalid codes."
        },
        {
          "id": 4,
          "title": "Create Bidirectional Authentication System",
          "description": "Implement a secure two-step approval process requiring administrator verification for integration requests with appropriate notifications.",
          "dependencies": [
            3
          ],
          "details": "Develop a system where team administrators must approve integration requests from external teams and mercenaries. Create a notification system using email, SMS, or in-app alerts to inform administrators of pending requests. Implement secure token-based authentication for the approval process. Design the system to prevent unauthorized approvals and include timeout mechanisms for pending requests. Apply conditional access policies as an additional security layer, such as requiring phishing-resistant authentication for administrators approving requests from outside trusted networks.",
          "status": "pending",
          "testStrategy": "Test the complete approval workflow, verify notification delivery, and conduct security testing to ensure the approval process cannot be bypassed."
        },
        {
          "id": 5,
          "title": "Build Data Integration Engine",
          "description": "Develop the core data migration logic to transfer external records to registered user accounts with conflict resolution capabilities.",
          "dependencies": [
            4
          ],
          "details": "Implement a robust data migration engine that transfers match records, statistics, attendance data, and performance metrics from external/mercenary profiles to registered user accounts. Create conflict resolution algorithms to handle overlapping data periods. Use database transactions for atomic operations to ensure data integrity. Implement data mapping rules to handle different data formats from external sources. Include progress tracking for long-running integrations and support for partial migrations.",
          "status": "pending",
          "testStrategy": "Test with various data scenarios including edge cases, verify transaction integrity, and validate that all data is correctly transferred without corruption."
        },
        {
          "id": 6,
          "title": "Implement Audit and Rollback System",
          "description": "Create a comprehensive logging and rollback mechanism for all integration operations with backup snapshots.",
          "dependencies": [
            5
          ],
          "details": "Develop detailed logging for all integration operations including timestamps, data transferred, and approval chains. Store logs in a tamper-evident format. Implement rollback functionality that can safely reverse integrations if issues are discovered. Create backup snapshots before each integration operation. Design the system to maintain GDPR compliance for all data transfers and storage. Include mechanisms to purge sensitive data from logs according to retention policies.",
          "status": "pending",
          "testStrategy": "Test rollback functionality with various integration scenarios, verify log integrity, and validate that backups can be successfully restored."
        },
        {
          "id": 7,
          "title": "Develop Data Integrity Verification System",
          "description": "Create validation checks and conflict detection mechanisms to ensure statistical consistency after integration.",
          "dependencies": [
            5
          ],
          "details": "Implement validation checks to ensure statistical consistency after integration (total goals, match counts, etc.). Develop automated conflict detection for impossible scenarios such as the same player appearing in multiple matches simultaneously. Create data reconciliation reports for administrators to review integration results. Implement a quarantine mechanism for suspicious data that requires manual review. Design the system to handle edge cases such as partial match data or incomplete statistics.",
          "status": "pending",
          "testStrategy": "Test with intentionally conflicting data sets, verify detection of statistical anomalies, and validate reconciliation report accuracy."
        },
        {
          "id": 8,
          "title": "Deploy and Optimize QR Code Integration System",
          "description": "Finalize system deployment with security hardening, performance optimization, and comprehensive documentation.",
          "dependencies": [
            2,
            3,
            4,
            5,
            6,
            7
          ],
          "details": "Deploy the complete QR code integration system with appropriate security hardening. Implement rate limiting for integration requests to prevent abuse. Create secure API endpoints with proper authentication. Optimize performance for high-volume periods. Develop comprehensive documentation for system administrators and end users. Conduct security audits and penetration testing. Implement monitoring and alerting for system health and security events. Ensure the system meets all GDPR compliance requirements for data transfers and storage.",
          "status": "pending",
          "testStrategy": "Conduct load testing to verify system performance under stress, perform security penetration testing, and validate the system against compliance requirements."
        }
      ]
    }
  ]
}