{
  "tasks": [
    {
      "id": 1,
      "title": "Project Setup and Infrastructure",
      "description": "Initialize Next.js project with TypeScript, Supabase integration, and development environment setup",
      "details": "Create Next.js 14+ project with TypeScript, install and configure Supabase client, setup TailwindCSS, Framer Motion, and Zustand. Configure environment variables for Supabase URL and anon key. Setup project structure with /components, /pages, /lib, /types directories. Initialize git repository and setup basic CI/CD pipeline.",
      "testStrategy": "Verify project builds successfully, Supabase connection works, and all dependencies are properly installed. Test development server startup and basic routing.",
      "priority": "high",
      "dependencies": [],
      "status": "done",
      "subtasks": [
        {
          "id": 1,
          "title": "Create Next.js Project with TypeScript Configuration",
          "description": "Initialize a new Next.js project using create-next-app with TypeScript enabled. Ensure the project is set up with the appropriate TypeScript configuration files.",
          "dependencies": [],
          "details": "Run `npx create-next-app@latest --ts` and follow the prompts to set up the project with TypeScript support. Verify that tsconfig.json and necessary type dependencies are present.",
          "status": "done"
        },
        {
          "id": 2,
          "title": "Set Up Supabase Client and Environment Configuration",
          "description": "Install the Supabase client library and configure environment variables for connecting to the Supabase backend.",
          "dependencies": [
            1
          ],
          "details": "Install @supabase/supabase-js, create a supabase client utility, and add environment variables (e.g., SUPABASE_URL, SUPABASE_ANON_KEY) to .env.local. Test the connection.",
          "status": "done"
        },
        {
          "id": 3,
          "title": "Install TailwindCSS and Styling Framework",
          "description": "Add TailwindCSS and any additional styling frameworks to the project, and configure them for use with Next.js and TypeScript.",
          "dependencies": [
            1
          ],
          "details": "Install TailwindCSS using the official setup guide, generate tailwind.config.js and postcss.config.js, and import Tailwind styles in the global stylesheet.",
          "status": "done"
        },
        {
          "id": 4,
          "title": "Organize Project Structure",
          "description": "Establish a clear and scalable project directory structure, including folders for components, pages, utilities, and styles.",
          "dependencies": [
            1,
            2,
            3
          ],
          "details": "Create directories such as /components, /pages (or /app), /utils, and /styles. Move initial files as needed and update imports to match the new structure.",
          "status": "done"
        },
        {
          "id": 5,
          "title": "Set Up CI/CD Pipeline",
          "description": "Configure a continuous integration and deployment pipeline for the project using a platform such as GitHub Actions or Vercel.",
          "dependencies": [
            1,
            2,
            3,
            4
          ],
          "details": "Create configuration files for CI/CD, such as .github/workflows/main.yml or set up deployment on Vercel. Ensure the pipeline installs dependencies, runs tests, and deploys on push.",
          "status": "done"
        }
      ]
    },
    {
      "id": 2,
      "title": "Supabase Database Schema Design",
      "description": "Create comprehensive database schema for users, teams, matches, and all core entities",
      "details": "Design and implement PostgreSQL schema including: users table (id, email, name, nickname, phone, position), teams table (id, name, description, region, activity_info), team_members table (team_id, user_id, role, is_primary_team), home_stadiums, external_teams, matches, match_attendances, match_stats, mercenary_records tables. Setup proper foreign key relationships, indexes, and constraints.",
      "testStrategy": "Validate schema creation, test foreign key constraints, verify data types and nullable fields. Run sample data insertion and query tests.",
      "priority": "high",
      "dependencies": [
        1
      ],
      "status": "done",
      "subtasks": [
        {
          "id": 1,
          "title": "사용자 프로필 테이블 설계 및 생성",
          "description": "사용자 기본 정보와 프로필 관리를 위한 테이블을 설계하고 생성합니다.",
          "details": "users 테이블: id (UUID, PK), email (unique), name, nickname, phone, position (enum), avatar_url, created_at, updated_at. Supabase Auth와 연동하여 사용자 프로필 정보를 관리합니다.",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 2
        },
        {
          "id": 2,
          "title": "팀 및 팀 멤버십 테이블 설계",
          "description": "팀 정보와 팀 멤버 관계를 관리하는 테이블들을 설계하고 생성합니다.",
          "details": "teams 테이블: id (UUID, PK), name (unique), description, home_stadium, region, created_by, created_at, updated_at. team_members 테이블: id (UUID, PK), team_id (FK), user_id (FK), role (enum: owner, manager, captain, member), status (enum: pending, approved, rejected), joined_at.",
          "status": "done",
          "dependencies": [
            1
          ],
          "parentTaskId": 2
        },
        {
          "id": 3,
          "title": "홈 구장 및 외부 팀 테이블 설계",
          "description": "홈 구장 정보와 등록되지 않은 외부 팀 관리를 위한 테이블들을 설계합니다.",
          "details": "home_stadiums 테이블: id (UUID, PK), name, address, facilities, contact_info, team_id (FK). external_teams 테이블: id (UUID, PK), name, region, contact_info, created_by_team_id (FK), notes, created_at.",
          "status": "done",
          "dependencies": [
            2
          ],
          "parentTaskId": 2
        },
        {
          "id": 4,
          "title": "경기 및 출석 관리 테이블 설계",
          "description": "경기 정보와 참석자 출석 관리를 위한 테이블들을 설계하고 생성합니다.",
          "details": "matches 테이블: id (UUID, PK), home_team_id (FK), away_team_id (FK, nullable), away_team_name (외부팀용), stadium, match_date, status (enum), description, created_at. match_attendances 테이블: id (UUID, PK), match_id (FK), user_id (FK), status (enum: attending, not_attending, maybe), is_mercenary (boolean), notes.",
          "status": "done",
          "dependencies": [
            3
          ],
          "parentTaskId": 2
        },
        {
          "id": 5,
          "title": "경기 통계 및 용병 기록 테이블 설계",
          "description": "경기 중 개인 통계와 용병 활동 기록을 관리하는 테이블들을 설계합니다.",
          "details": "match_stats 테이블: id (UUID, PK), match_id (FK), user_id (FK), goals, assists, yellow_cards, red_cards, is_mercenary. mercenary_records 테이블: id (UUID, PK), user_id (FK), team_id (FK), match_id (FK), contact_method, notes, created_at.",
          "status": "done",
          "dependencies": [
            4
          ],
          "parentTaskId": 2
        },
        {
          "id": 6,
          "title": "데이터베이스 제약조건 및 인덱스 설정",
          "description": "외래키 제약조건, 인덱스, 및 데이터 무결성을 위한 설정을 구현합니다.",
          "details": "모든 테이블 간 외래키 관계 설정, 성능 최적화를 위한 인덱스 생성 (team_id, user_id, match_date 등), unique 제약조건 설정 (team name, user email 등), check 제약조건 추가.",
          "status": "done",
          "dependencies": [
            5
          ],
          "parentTaskId": 2
        },
        {
          "id": 7,
          "title": "기본 RLS 정책 구조 설계",
          "description": "팀 기반 데이터 접근 제어를 위한 기본적인 RLS 정책 구조를 설계합니다.",
          "details": "각 테이블별 기본 RLS 정책 활성화, 팀 멤버십 기반 접근 제어 정책 설계, 사용자 자신의 데이터 접근 정책, 팀 소유자/관리자 권한 정책 기본 구조 생성. 실제 구현은 작업 3에서 진행.",
          "status": "done",
          "dependencies": [
            6
          ],
          "parentTaskId": 2
        }
      ]
    },
    {
      "id": 3,
      "title": "Row Level Security (RLS) Implementation",
      "description": "Implement comprehensive RLS policies for team-based data access control",
      "details": "Create RLS policies for all tables ensuring users can only access data from teams they belong to. Implement role-based access (구단주 > 운영진 > 주장 > 일반멤버) with appropriate CRUD permissions. Setup policies for: team data access, match management, stats viewing, member management based on user roles.",
      "testStrategy": "Test data isolation between teams, verify role-based permissions work correctly, ensure unauthorized access is blocked. Test with multiple user scenarios.",
      "priority": "high",
      "dependencies": [
        2
      ],
      "status": "done",
      "subtasks": [
        {
          "id": 1,
          "title": "Design Team-Based Data Isolation Policies",
          "description": "Define and implement RLS policies that ensure users can only access data belonging to their own team, preventing cross-team data leakage.",
          "dependencies": [],
          "details": "Analyze the data schema to identify team ownership fields. Create RLS policies that restrict SELECT, INSERT, UPDATE, and DELETE operations to rows where the user's team matches the row's team identifier.\n<info added on 2025-05-31T08:00:47.830Z>\n팀 기반 데이터 격리 정책 설계 완료\n\n구현한 내용:\n- 모든 주요 테이블에 대한 RLS 활성화 및 정책 정의\n- 팀 소유권 기반 데이터 접근 제어 (team_members 테이블 기준)\n- 각 테이블별 CRUD 권한 정책:\n  * teams: 팀 멤버만 조회, 생성자가 소유자, 소유자/운영진만 수정, 소유자만 삭제\n  * team_members: 같은 팀 멤버만 조회, 소유자/운영진만 멤버 관리\n  * matches: 홈/어웨이팀 멤버만 조회, 주장급 이상만 생성/수정, 운영진 이상만 삭제\n  * match_attendance: 관련 팀 멤버만 조회, 본인만 참석 응답 관리\n  * player_stats: 관련 팀 멤버만 조회, 주장급 이상만 입력/수정\n  * external_teams: 등록팀 멤버만 조회, 주장급 이상만 관리\n- 헬퍼 함수 정의: 권한 확인을 위한 재사용 가능한 함수들\n\n모든 정책이 auth.uid()를 기반으로 하여 Supabase Auth와 완전히 통합됨.\n</info added on 2025-05-31T08:00:47.830Z>",
          "status": "done"
        },
        {
          "id": 2,
          "title": "Implement Role Hierarchy Permission Policies",
          "description": "Establish RLS policies that enforce permissions based on the role hierarchy (Owner > Staff > Captain > Member) within each team.",
          "dependencies": [
            1
          ],
          "details": "Map user roles to permission levels. Define RLS policies that grant or restrict actions (e.g., editing team info, managing members) according to the user's role within their team.\n<info added on 2025-05-31T08:05:57.320Z>\n✅ 역할 계층 권한 정책 구현 완료\n\n구현한 내용:\n1. **역할 계층 시스템 설정**\n   - Owner(4) > Manager(3) > Captain(2) > Member(1) 레벨 시스템\n   - 역할별 권한 레벨 비교 함수들 구현\n\n2. **세밀한 권한 검증 함수들**\n   - get_role_level(): 역할별 권한 레벨 반환\n   - has_higher_role(): 다른 역할보다 높은 권한 확인  \n   - has_minimum_role(): 최소 요구 역할 확인\n   - can_modify_member_role(): 멤버 역할 변경 권한 검증\n   - transfer_team_ownership(): 팀 소유권 이전 기능\n\n3. **기능별 권한 함수들**\n   - can_input_match_results(): 경기 결과 입력 권한 (captain+)\n   - can_modify_team_settings(): 팀 설정 변경 권한 (manager+)\n   - can_invite_members(): 멤버 초대 권한 (captain+)\n   - can_manage_mercenary_requests(): 용병 관리 권한 (captain+)\n   - can_modify_match_stats(): 통계 수정 권한 (captain+)\n   - can_delete_team(): 팀 해체 권한 (owner만)\n   - can_remove_member(): 멤버 제거 권한 (계층별 차등)\n\n4. **권한 매트릭스 및 감사**\n   - user_team_permissions 뷰: 사용자별 권한 현황 조회\n   - permission_audit_log 테이블: 권한 검증 로그 기록\n   - 권한 검증 트리거 시스템 구축\n\n5. **데이터 무결성 강화**\n   - 경기 결과 입력 체크 제약 조건\n   - 팀 정보 수정 권한 체크 제약 조건\n\n모든 권한이 역할 계층을 존중하며, 하위 역할이 상위 역할의 권한을 침범할 수 없도록 구현됨.\n</info added on 2025-05-31T08:05:57.320Z>",
          "status": "done"
        },
        {
          "id": 3,
          "title": "Define Match and Statistics Access Policies",
          "description": "Create RLS policies to control access to match data and player statistics, ensuring only authorized team members and roles can view or modify relevant records.",
          "dependencies": [
            1,
            2
          ],
          "details": "Determine which roles can access or modify match results and statistics. Implement RLS policies that enforce these rules, considering both team membership and role.\n<info added on 2025-05-31T08:08:16.682Z>\n✅ 경기 및 통계 액세스 정책 정의 완료\n\n구현한 내용:\n1. **경기 상태별 접근 제어**\n   - can_access_match_by_status(): 경기 상태에 따른 세밀한 권한 제어\n   - 'view': 모든 팀 멤버 조회 가능\n   - 'edit_details': captain+ 역할, scheduled 상태에서만 수정\n   - 'input_result': captain+ 역할, ongoing/completed 상태에서 결과 입력\n   - 'modify_result': manager+ 역할, completed 상태에서 결과 수정\n   - 'cancel': manager+ 역할만 경기 취소 가능\n\n2. **통계 데이터 시간 기반 제어**\n   - can_modify_stats_by_timing(): 경기 완료 후 72시간 이내에만 통계 입력/수정 허용\n   - 경기 상태가 'completed'일 때만 통계 입력 가능\n   - 시간 제한으로 데이터 무결성 보장\n\n3. **개인 vs 팀 통계 접근 제어**\n   - can_access_player_stats(): 개인별 통계 접근 권한 세분화\n   - 'view': 같은 팀 멤버 간 통계 조회 가능\n   - 'input': captain+ 역할만 통계 입력\n   - 'modify': 본인 통계는 captain+, 타인 통계는 manager+\n   - 'delete': manager+ 역할만 통계 삭제\n\n4. **참석 관리 권한 시스템**\n   - can_manage_attendance(): 경기 참석 관리 권한\n   - 본인 참석 응답: 본인만 수정 가능\n   - 타인 참석 상태 관리: captain+ 역할\n\n5. **데이터 무결성 보장 트리거**\n   - 경기 결과 수정 시간 제한 (완료 후 24시간)\n   - 경기 상태 자동 업데이트 (결과 입력 시 completed로 변경)\n   - 통계 입력 검증 (완료된 경기, 팀 멤버만)\n\n6. **세밀한 RLS 정책 추가**\n   - match_stats_timing_policy: 시간 기반 통계 수정 제한\n   - match_stats_delete_policy: manager+ 역할만 삭제\n   - attendance_management_policy: 역할별 참석 관리\n   - match_details_edit_policy: 상태별 경기 정보 수정\n   - match_result_input_policy: 역할 및 상태별 결과 입력/수정\n\n모든 정책이 경기 상태, 시간, 역할을 종합적으로 고려하여 적절한 접근 제어를 제공함.\n</info added on 2025-05-31T08:08:16.682Z>",
          "status": "done"
        },
        {
          "id": 4,
          "title": "Secure Member Management Operations",
          "description": "Develop RLS policies for member management actions (inviting, removing, updating members), ensuring only users with sufficient privileges can perform these operations.",
          "dependencies": [
            2
          ],
          "details": "Identify member management endpoints and required privileges. Write RLS policies that allow only Owners and Staff to manage team membership, while restricting such actions for Captains and Members.\n<info added on 2025-05-31T08:13:30.133Z>\n## 멤버 관리 작업 분류\n팀 멤버 관리에는 다음과 같은 작업들이 있습니다:\n\n1. **멤버 초대 및 가입 신청 관리**\n   - 새로운 멤버 초대 (captain+ 권한)\n   - 가입 신청 승인/거절 (manager+ 권한)\n   - 초대 링크 생성 및 관리\n\n2. **멤버 역할 관리**\n   - 멤버 역할 변경 (자신보다 하위 역할만, manager+ 권한)\n   - 소유권 이전 (owner만)\n   - 임시 권한 위임 시스템\n\n3. **멤버 제거 및 상태 관리**\n   - 멤버 강퇴 (계층별 차등 권한)\n   - 멤버 자발적 탈퇴\n   - 멤버 활동 정지 처리\n\n4. **멤버 정보 관리**\n   - 팀 내 닉네임 설정\n   - 멤버 연락처 정보 관리\n   - 멤버 가입 날짜 및 기록\n\n## 보안 요구사항 식별\n- Owner/Manager만이 팀 구성을 실질적으로 변경 가능\n- Captain은 제한적인 멤버 관리 권한 (초대만)\n- 자신보다 같거나 높은 권한의 멤버는 관리 불가\n- 모든 멤버 관리 작업에 대한 감사 로그 필요\n</info added on 2025-05-31T08:13:30.133Z>\n<info added on 2025-05-31T08:18:48.598Z>\n## RLS 정책 구현 완료\n\n멤버 관리를 위한 포괄적인 RLS 정책이 성공적으로 구현되었습니다.\n\n### 구현된 핵심 기능\n\n**역할 계층 권한 시스템**\n- get_role_level(): 역할별 권한 레벨 반환 (owner=4, manager=3, captain=2, member=1)\n- has_higher_role(): 역할 간 권한 비교\n- has_minimum_role(): 최소 권한 요구사항 확인\n- user_has_team_role(): 사용자 팀 내 역할 확인\n\n**멤버 관리 권한 함수**\n- can_invite_member(): 멤버 초대 권한 확인 (captain+ 권한)\n- can_process_join_request(): 가입 신청 처리 권한 확인 (manager+ 권한)\n- can_change_member_role(): 멤버 역할 변경 권한 확인 (계층적 권한 검증)\n- can_remove_team_member(): 멤버 제거 권한 확인 (자기 탈퇴는 항상 허용)\n\n**감사 로그 시스템**\n- member_management_audit 테이블 생성\n- 모든 멤버 관리 작업 자동 로깅 트리거\n- RLS 정책으로 manager+ 만 조회 가능\n\n**적용된 RLS 정책**\n- team_members 테이블: 조회/삽입/업데이트/삭제 정책\n- team_invitations 테이블: 초대 관리 정책\n- member_management_audit 테이블: 감사 로그 접근 정책\n\n**유틸리티 함수**\n- cleanup_expired_invitations(): 만료된 초대 정리\n- verify_member_action_permission(): 권한 검증 헬퍼\n\n### 보안 특징\n- 계층적 권한 시스템 (자신보다 높은 권한은 관리 불가)\n- 모든 멤버 관리 작업 감사 로깅\n- 자기 자신은 언제나 탈퇴 가능\n- Owner 전용 소유권 이전 기능\n- 팀 최대 인원 제한 (50명)\n\n모든 마이그레이션이 Supabase 데이터베이스에 성공적으로 적용되어 멤버 관리 RLS 정책 구현이 완료되었습니다.\n</info added on 2025-05-31T08:18:48.598Z>",
          "status": "done"
        },
        {
          "id": 5,
          "title": "Establish RLS Testing and Validation Procedures",
          "description": "Set up systematic testing and validation processes to verify that all RLS policies enforce correct access controls and prevent unauthorized data access.",
          "dependencies": [
            1,
            2,
            3,
            4
          ],
          "details": "Develop test cases for each policy, covering both allowed and denied scenarios. Use Supabase's tools and manual queries to validate policy effectiveness and catch misconfigurations.\n<info added on 2025-05-31T08:33:08.051Z>\n✅ RLS 테스트 및 검증 절차 구현 완료\n\n## 구현된 테스트 프레임워크:\n\n### 1. 테스트 인프라\n- **테스트 결과 저장 테이블**: `rls_test_results`, `rls_test_scenarios`\n- **자동 정리 시스템**: 30일 후 테스트 결과 자동 삭제\n- **테스트 실행 프레임워크**: 체계적인 테스트 실행 및 결과 추적\n\n### 2. 핵심 테스트 함수들\n- **`run_comprehensive_rls_tests()`**: 종합적인 RLS 테스트 실행\n- **`check_rls_policies_status()`**: RLS 정책 상태 확인\n- **`check_rls_coverage()`**: 정책 커버리지 분석 (모든 테이블 100% 커버리지 확인)\n- **`scan_rls_vulnerabilities()`**: 보안 취약점 자동 스캔\n- **`run_quick_rls_test()`**: 빠른 상태 확인\n\n### 3. 성능 모니터링 시스템\n- **`analyze_rls_performance()`**: 정책 성능 분석\n- **복잡도 기반 성능 등급**: GOOD/MODERATE/NEEDS_OPTIMIZATION\n- **최적화 권장사항**: 인덱스 추가, 정책 단순화 제안\n\n### 4. 보안 취약점 관리\n- **심각도별 분류**: HIGH/MEDIUM/LOW\n- **자동 스캔 결과**: 1개 HIGH 취약점, 다수 MEDIUM 성능 개선 사항 식별\n- **권장사항 제공**: 구체적인 개선 방법 제시\n\n### 5. 테스트 카테고리별 검증\n- **팀 격리 테스트**: 팀 간 데이터 격리 확인\n- **역할 권한 테스트**: 계층적 권한 시스템 검증\n- **멤버 관리 테스트**: 멤버 초대/역할변경/제거 권한 확인\n- **경기 통계 테스트**: 경기 관리 및 통계 입력 권한 검증\n\n### 6. 문서화 및 가이드\n- **종합 테스트 가이드**: `docs/rls_testing_guide.md` 생성\n- **정기 검증 절차**: 일일/주간/월간 검증 프로세스 정의\n- **문제 해결 가이드**: 일반적인 문제 및 해결 방법\n- **모범 사례**: CI/CD 통합, 모니터링, 문서화 권장사항\n\n## 검증 결과:\n- ✅ 모든 테이블 RLS 활성화 확인\n- ✅ 100% 정책 커버리지 달성\n- ⚠️ 1개 HIGH 심각도 취약점 발견 (mercenary_requests 정책)\n- ⚠️ 다수 성능 최적화 기회 식별\n\n## 다음 단계:\n- HIGH 심각도 취약점 즉시 수정 필요\n- 성능 최적화를 위한 인덱스 추가 고려\n- CI/CD 파이프라인에 자동 테스트 통합\n</info added on 2025-05-31T08:33:08.051Z>",
          "status": "done"
        },
        {
          "id": 6,
          "title": "Optimize RLS Policies for Performance",
          "description": "Analyze and optimize RLS policies to ensure minimal performance overhead, following Supabase and PostgreSQL best practices.",
          "dependencies": [
            1,
            2,
            3,
            4,
            5
          ],
          "details": "Review policy conditions for efficiency, add indexes on columns used in RLS checks, and refactor complex logic to minimize query cost. Monitor query performance and adjust as needed.\n<info added on 2025-05-31T08:39:12.905Z>\nRLS 정책 성능 최적화 분석을 시작했습니다. 현재 48개의 활성 RLS 정책을 분석한 결과, 주요 성능 병목점을 식별했습니다: team_members 테이블에 대한 반복적인 서브쿼리, 복잡한 서브쿼리 패턴의 중복 사용, auth.uid() 함수의 빈번한 호출. 최적화 전략으로는 자주 사용되는 패턴에 대한 인덱스 추가, 함수 기반 정책을 통한 복잡도 감소, 성능 테스트를 통한 검증을 계획하고 있습니다.\n</info added on 2025-05-31T08:39:12.905Z>\n<info added on 2025-05-31T08:42:21.274Z>\nRLS 정책 성능 최적화 작업이 완료되었습니다. 10개의 전략적 인덱스를 추가하여 팀 멤버십 조회, 역할 기반 권한 체크, 매치 관련 쿼리를 최적화했습니다. 8개의 RLS 헬퍼 함수(get_user_teams, get_user_teams_with_role, user_can_access_match 등)를 구현하여 복잡한 서브쿼리를 단순화했습니다. external_teams, matches, match_attendances, match_stats 등 주요 테이블의 RLS 정책을 함수 기반으로 재작성했습니다. 성능 모니터링 시스템을 구축하여 정책 복잡도 분석, 인덱스 사용률 모니터링, 함수 성능 통계를 추적할 수 있게 되었습니다. 최종적으로 55개의 RLS 정책과 60개의 최적화된 인덱스를 관리하며, 평균 정책 복잡도를 86자로 감소시켰습니다. 이를 통해 team_members 테이블 조회 속도가 대폭 개선되고, 복잡한 서브쿼리 제거로 전반적인 쿼리 성능이 향상되었습니다.\n</info added on 2025-05-31T08:42:21.274Z>",
          "status": "done"
        }
      ]
    },
    {
      "id": 4,
      "title": "Social Authentication System",
      "description": "Implement Google and Kakao OAuth authentication using Supabase Auth",
      "details": "Configure Supabase Auth providers for Google and Kakao OAuth. Create authentication components: LoginPage, AuthCallback, ProtectedRoute wrapper. Implement auth state management with Zustand store. Setup automatic user profile creation on first login. Handle authentication errors and loading states.",
      "testStrategy": "Test Google and Kakao login flows, verify user session persistence, test logout functionality, validate automatic profile creation, and error handling scenarios.",
      "priority": "high",
      "dependencies": [
        1
      ],
      "status": "done",
      "subtasks": [
        {
          "id": 1,
          "title": "OAuth Provider Configuration",
          "description": "Set up and configure OAuth providers (Google and Kakao) including client credentials, redirect URIs, scopes, and provider-specific settings",
          "dependencies": [],
          "details": "Configure OAuth 2.0 settings for Google and Kakao providers, set up client IDs and secrets, define redirect URIs, configure required scopes for user data access, and implement provider-specific configuration management",
          "status": "done"
        },
        {
          "id": 2,
          "title": "Authentication UI Components and Flows",
          "description": "Develop user interface components for login, registration, and OAuth flows including buttons, forms, and redirect handling",
          "dependencies": [
            1
          ],
          "details": "Create login/signup forms, OAuth provider buttons, loading states, redirect handling components, and implement the complete authentication user experience flow",
          "status": "done"
        },
        {
          "id": 3,
          "title": "Auth State Management Implementation",
          "description": "Implement centralized authentication state management to track user authentication status, tokens, and user data across the application",
          "dependencies": [
            1
          ],
          "details": "Set up global auth state management using context/redux, implement actions for login/logout/token refresh, manage authentication state persistence, and provide auth state to components",
          "status": "done"
        },
        {
          "id": 4,
          "title": "User Session Handling and Persistence",
          "description": "Implement secure session management including token storage, refresh mechanisms, and session persistence across browser sessions",
          "dependencies": [
            3
          ],
          "details": "Implement secure token storage (localStorage/sessionStorage/cookies), automatic token refresh logic, session expiration handling, and cross-tab session synchronization",
          "status": "done"
        },
        {
          "id": 5,
          "title": "Authentication Error Handling and Recovery",
          "description": "Implement comprehensive error handling for authentication failures, network issues, and recovery mechanisms",
          "dependencies": [
            2,
            3,
            4
          ],
          "details": "Handle OAuth errors, network failures, token expiration, invalid credentials, rate limiting, and implement user-friendly error messages with recovery options and retry mechanisms",
          "status": "done"
        }
      ]
    },
    {
      "id": 5,
      "title": "User Profile Management",
      "description": "Create user profile creation and management system with position selection",
      "details": "Build ProfileSetup component for new users with fields: name, nickname, phone, position (GK, DF, MF, FW). Create ProfileEdit component for existing users. Implement profile validation and update functionality. Store profile data in users table with proper validation.",
      "testStrategy": "Test profile creation flow, validate form inputs, test profile updates, verify data persistence, and handle validation errors properly.",
      "priority": "medium",
      "dependencies": [
        4
      ],
      "status": "done",
      "subtasks": [
        {
          "id": 1,
          "title": "Profile Creation Form and Validation",
          "description": "Develop the initial profile creation form with comprehensive field validation, including required fields, data format checks, and real-time validation feedback for new user registration.",
          "dependencies": [],
          "details": "Create form components with input fields for basic profile information (name, email, phone, etc.), implement client-side and server-side validation rules, add error handling and user feedback mechanisms, and ensure accessibility compliance.",
          "status": "done"
        },
        {
          "id": 2,
          "title": "Profile Editing Interface",
          "description": "Build the profile editing interface that allows existing users to modify their profile information with intuitive UI/UX design and proper validation controls.",
          "dependencies": [
            1
          ],
          "details": "Design editable profile forms with pre-populated data, implement field-level editing capabilities, add save/cancel functionality, include confirmation dialogs for critical changes, and ensure consistent validation with creation form.",
          "status": "done"
        },
        {
          "id": 3,
          "title": "Profile Data Persistence and Updates",
          "description": "Implement backend data persistence layer for profile information including database operations, API endpoints, and data synchronization mechanisms.",
          "dependencies": [
            1
          ],
          "details": "Create database schema for profile data, develop CRUD API endpoints, implement data validation at database level, add transaction handling for data integrity, and create data migration scripts if needed.\n<info added on 2025-06-01T08:06:35.481Z>\n✅ 프로필 데이터 지속성 기능 구현 완료\n\n구현된 기능들:\n- createProfile: 새 사용자 프로필 생성 함수\n- getProfile: 사용자 프로필 조회 함수  \n- updateProfile: 프로필 업데이트 함수\n- checkNicknameAvailability: 닉네임 중복 확인 함수\n\n모든 함수들이 적절한 에러 핸들링과 함께 구현되었으며, Supabase와 연동되어 데이터베이스 CRUD 작업을 수행합니다. 트랜잭션 무결성도 Supabase의 PostgreSQL 기본 기능으로 보장됩니다.\n</info added on 2025-06-01T08:06:35.481Z>",
          "status": "done"
        },
        {
          "id": 4,
          "title": "Profile Completion Workflow for New Users",
          "description": "Design and implement a guided profile completion workflow that helps new users through the profile setup process with progress tracking and completion incentives.",
          "dependencies": [
            1,
            2,
            3
          ],
          "details": "Create multi-step profile completion wizard, implement progress indicators and completion tracking, add optional vs required field guidance, design completion rewards/notifications, and integrate with onboarding flow.\n<info added on 2025-06-01T08:09:55.426Z>\n✅ Profile completion workflow implementation completed\n\nImplemented features:\n1. **Progress Indicator**: Real-time progress bar displaying profile completion percentage\n2. **Field Status Display**: Visual completion status for each input field (✓, *, (optional))\n3. **Onboarding Component**: 4-step welcome guide for new users\n   - League Maker introduction\n   - Team features explanation  \n   - Match management guide\n   - Profile setup initiation\n4. **Smart Workflow**: \n   - Onboarding state saved to localStorage for direct profile form access on return visits\n   - Dynamic button text and activation state based on completion level\n   - Step-by-step guidance messages\n5. **Completion Tracking Function**: Utility to calculate profile completion and identify missing fields\n6. **User Experience Improvements**:\n   - Congratulatory message and next steps guidance upon completion\n   - Field-specific help text\n   - Smooth animations and visual feedback\n\nNew users now experience a complete workflow: onboarding → profile setup → completion celebration.\n</info added on 2025-06-01T08:09:55.426Z>",
          "status": "done"
        }
      ]
    },
    {
      "id": 6,
      "title": "Core UI Component Library",
      "description": "Build reusable UI components using TailwindCSS with mobile-first design",
      "details": "Create essential components: Button, Input, Modal, Card, Loading, Toast, Navigation, Header, Footer. Implement responsive design patterns for mobile-first approach. Setup component variants and proper TypeScript interfaces. Include accessibility features and consistent styling system.",
      "testStrategy": "Test components across different screen sizes, verify accessibility features, test component variants and props, ensure consistent styling and responsive behavior.",
      "priority": "medium",
      "dependencies": [
        1
      ],
      "status": "pending",
      "subtasks": [
        {
          "id": 1,
          "title": "Set Up TailwindCSS and Project Structure",
          "description": "Initialize the project with TailwindCSS, configure the mobile-first responsive design system, and establish a consistent styling foundation for all UI components.",
          "dependencies": [],
          "details": "Install TailwindCSS, configure breakpoints for mobile-first design, and set up a global style guide to ensure consistency across all components. Prepare the folder structure for scalable component development.",
          "status": "pending",
          "testStrategy": "Verify TailwindCSS is correctly installed and responsive utility classes work as expected on different screen sizes."
        },
        {
          "id": 2,
          "title": "Develop Core UI Components with Variants and TypeScript Interfaces",
          "description": "Implement essential reusable UI components (Button, Input, Modal, Card, Loading, Toast, Navigation, Header, Footer) with support for variants and strong TypeScript interfaces.",
          "dependencies": [
            1
          ],
          "details": "Each component should be built as a functional TypeScript component, supporting multiple variants (e.g., primary/secondary buttons), and exposing clear props interfaces for type safety and reusability.",
          "status": "pending",
          "testStrategy": "Unit test each component for correct rendering, variant switching, and prop validation using a component testing library."
        },
        {
          "id": 3,
          "title": "Integrate Accessibility Features Across Components",
          "description": "Ensure all UI components are accessible, including keyboard navigation, ARIA attributes, and screen reader support.",
          "dependencies": [
            2
          ],
          "details": "Audit each component for accessibility compliance, add necessary ARIA roles, labels, and keyboard interactions, and document accessibility features for future reference.",
          "status": "pending",
          "testStrategy": "Use accessibility testing tools (e.g., axe, Lighthouse) and manual keyboard navigation to validate compliance."
        },
        {
          "id": 4,
          "title": "Implement Mobile-First Responsive Patterns and UX",
          "description": "Apply mobile-first responsive design patterns to all components, optimizing layouts and interactions for mobile devices and progressively enhancing for larger screens.",
          "dependencies": [
            2
          ],
          "details": "Utilize TailwindCSS responsive utility classes and breakpoints to ensure components adapt seamlessly from mobile to desktop. Prioritize touch-friendly interactions and mobile UX best practices.",
          "status": "pending",
          "testStrategy": "Test all components on various device emulators and real devices, ensuring usability and visual consistency across breakpoints."
        },
        {
          "id": 5,
          "title": "Establish Component Documentation and Usage Guidelines",
          "description": "Create comprehensive documentation for each component, including usage examples, props, variants, accessibility notes, and responsive behavior.",
          "dependencies": [
            3,
            4
          ],
          "details": "Document each component in a centralized system (e.g., Storybook or MDX files), providing clear guidance for developers on implementation, customization, and best practices.",
          "status": "pending",
          "testStrategy": "Review documentation for completeness and clarity; conduct peer reviews to ensure guidelines are understandable and actionable."
        }
      ]
    },
    {
      "id": 7,
      "title": "Team Creation and Basic Management",
      "description": "Implement team creation functionality with automatic 구단주 role assignment",
      "details": "Create TeamCreation component with fields: team name, description, region, activity_info. Implement automatic 구단주 role assignment to team creator. Setup team validation and creation logic. Create basic team dashboard view. Implement team_members relationship creation.",
      "testStrategy": "Test team creation flow, verify 구단주 role assignment, validate team data persistence, test team dashboard access, and handle creation errors.",
      "priority": "high",
      "dependencies": [
        5,
        6
      ],
      "status": "pending",
      "subtasks": [
        {
          "id": 1,
          "title": "Create TeamCreation Component UI",
          "description": "Design and implement the TeamCreation component with required fields and validation",
          "dependencies": [],
          "details": "Develop a responsive form component with fields for team name, description, region, and activity_info. Implement client-side validation for required fields. Ensure mobile optimization with responsive design principles. Include a submit button that triggers the team creation process.",
          "status": "pending",
          "testStrategy": "Verify form validation for required fields and test responsive behavior across different screen sizes"
        },
        {
          "id": 2,
          "title": "Implement RBAC System with 구단주 Role Assignment",
          "description": "Create the role-based access control system with automatic 구단주 role assignment to team creators",
          "dependencies": [
            1
          ],
          "details": "Define the role hierarchy (구단주 > 운영진 > 주장 > 일반멤버) in the database schema. Implement the logic to automatically assign the 구단주 role to the user who creates a team. Create the necessary database tables and relationships for role management. Ensure proper permission checks are implemented for team management functions.",
          "status": "pending",
          "testStrategy": "Test automatic role assignment when a team is created and verify permission levels for different roles"
        },
        {
          "id": 3,
          "title": "Develop Team Creation Backend Logic",
          "description": "Implement server-side validation and team creation logic with database operations",
          "dependencies": [
            1
          ],
          "details": "Create API endpoints for team creation with server-side validation. Implement database operations to store team information (name, description, region, activity_info). Set up error handling for duplicate team names or validation failures. Create the team_members relationship in the database linking users to teams with their assigned roles.",
          "status": "pending",
          "testStrategy": "Test API endpoints with valid and invalid data, verify database entries are created correctly"
        },
        {
          "id": 4,
          "title": "Create Basic Team Dashboard View",
          "description": "Design and implement the team dashboard interface with role-specific features",
          "dependencies": [
            2,
            3
          ],
          "details": "Develop a responsive team dashboard that displays team information, member list with roles, and team statistics. Implement role-based UI elements that show different options based on user role (e.g., management options for 구단주). Include navigation to team management features. Ensure mobile optimization with appropriate layout adjustments for smaller screens.",
          "status": "pending",
          "testStrategy": "Test dashboard rendering with different user roles and verify correct display of role-specific features"
        },
        {
          "id": 5,
          "title": "Implement Team Members Relationship Management",
          "description": "Create functionality for managing team member relationships and permissions",
          "dependencies": [
            2,
            4
          ],
          "details": "Develop API endpoints for adding, removing, and updating team members. Implement permission checks to ensure only authorized roles can modify team membership. Create UI components for team owners to manage members and assign roles. Implement the approval-based member management system where new join requests require approval from team administrators.",
          "status": "pending",
          "testStrategy": "Test member addition, removal, and role changes with different user permissions to verify RBAC enforcement"
        }
      ]
    },
    {
      "id": 8,
      "title": "Role-Based Permission System",
      "description": "Implement hierarchical role system (구단주 > 운영진 > 주장 > 일반멤버)",
      "details": "Define role hierarchy and permissions matrix. Create role management utilities and hooks. Implement permission checking for UI components and API calls. Setup role assignment and modification functionality for authorized users. Create role-based navigation and feature access.",
      "testStrategy": "Test role hierarchy enforcement, verify permission checks work correctly, test role assignment/modification, validate UI elements show/hide based on roles.",
      "priority": "high",
      "dependencies": [
        7
      ],
      "status": "pending",
      "subtasks": [
        {
          "id": 1,
          "title": "Define Role Hierarchy and Permission Matrix",
          "description": "Create a comprehensive role hierarchy and permission matrix for the four roles: 구단주 (Owner), 운영진 (Staff), 주장 (Captain), and 일반멤버 (Regular Member).",
          "dependencies": [],
          "details": "Document the hierarchical relationship between roles with specific permissions for each role. Create a detailed matrix mapping each role to specific actions they can perform across all platform features. Include access levels for team management, match creation, member approval, and stadium management.",
          "status": "pending",
          "testStrategy": "Verify the permission matrix covers all system features and clearly defines what each role can and cannot do."
        },
        {
          "id": 2,
          "title": "Implement Role Management Database Schema and API",
          "description": "Design and implement the database schema and API endpoints for role management.",
          "dependencies": [
            1
          ],
          "details": "Create database tables for roles, permissions, and role assignments. Develop API endpoints for assigning roles, modifying roles, and checking permissions. Implement data validation to ensure role hierarchy integrity is maintained when changes are made.",
          "status": "pending",
          "testStrategy": "Test API endpoints with various role assignment scenarios to ensure proper validation and error handling."
        },
        {
          "id": 3,
          "title": "Develop Role-Based UI Components and Hooks",
          "description": "Create reusable UI components and React hooks for permission-based rendering and access control.",
          "dependencies": [
            2
          ],
          "details": "Develop a PermissionGuard component that conditionally renders UI elements based on user roles. Create usePermission and useRole hooks to easily check permissions throughout the application. Implement role-based navigation that dynamically adjusts based on the user's role.",
          "status": "pending",
          "testStrategy": "Test components with users of different roles to verify proper conditional rendering."
        },
        {
          "id": 4,
          "title": "Implement Permission Checking for API Calls",
          "description": "Add middleware for server-side permission validation on all API endpoints.",
          "dependencies": [
            2
          ],
          "details": "Create middleware that validates user permissions before processing API requests. Implement role-based access control for all sensitive operations. Ensure proper error responses when permission checks fail. Add logging for permission-related activities for security auditing.",
          "status": "pending",
          "testStrategy": "Test API endpoints with users of different roles to verify proper access control and error handling."
        },
        {
          "id": 5,
          "title": "Create Role Assignment and Management Interface",
          "description": "Develop UI for authorized users to assign and modify roles within their teams.",
          "dependencies": [
            3,
            4
          ],
          "details": "Build interfaces for 구단주 (Owner) to manage all roles, for 운영진 (Staff) to manage 주장 (Captain) and 일반멤버 (Regular Member) roles, and for 주장 (Captain) to view team members. Implement confirmation workflows for role changes. Add audit logging for all role modifications.",
          "status": "pending",
          "testStrategy": "Perform end-to-end testing of role assignment workflows with different user roles to verify proper functionality and permission enforcement."
        }
      ]
    },
    {
      "id": 9,
      "title": "Home Stadium Management System",
      "description": "Implement mandatory home stadium registration and management",
      "details": "Create StadiumRegistration component with fields: name, address, coordinates. Implement map integration for location selection. Setup mandatory stadium registration before team activation. Create stadium management interface for adding/editing/deleting stadiums. Implement favorite stadiums functionality.",
      "testStrategy": "Test stadium registration flow, verify mandatory requirement enforcement, test map integration, validate stadium CRUD operations, and test favorite stadium functionality.",
      "priority": "high",
      "dependencies": [
        8
      ],
      "status": "pending",
      "subtasks": [
        {
          "id": 1,
          "title": "Create StadiumRegistration Component",
          "description": "Develop a React component for stadium registration with required fields and form validation",
          "dependencies": [],
          "details": "Implement a StadiumRegistration React component with fields for name, address, and coordinates. Include form validation to ensure all required fields are completed. Design the component to be responsive for mobile optimization. Use React Bootstrap or MDB React UI components for consistent styling.",
          "status": "pending",
          "testStrategy": "Test form validation for required fields and edge cases. Verify responsive design on different screen sizes."
        },
        {
          "id": 2,
          "title": "Implement Map Integration",
          "description": "Integrate a map service for stadium location selection and coordinate generation",
          "dependencies": [
            1
          ],
          "details": "Add a map component that allows users to select stadium location by clicking on the map. Automatically populate coordinate fields based on map selection. Implement reverse geocoding to fill address fields when coordinates are selected. Consider using Google Maps API or an open-source alternative like Leaflet.",
          "status": "pending",
          "testStrategy": "Test coordinate generation accuracy and address lookup functionality. Verify map interaction on both desktop and mobile devices."
        },
        {
          "id": 3,
          "title": "Create Stadium Management Interface",
          "description": "Develop an interface for adding, editing, and deleting stadiums with appropriate permissions",
          "dependencies": [
            1,
            2
          ],
          "details": "Build a stadium management dashboard that lists all registered stadiums. Implement CRUD operations with appropriate role-based permissions (only team owners and admins can modify). Include search and filter functionality for stadium list. Design with responsive layout for mobile optimization.",
          "status": "pending",
          "testStrategy": "Test CRUD operations with different user roles. Verify permission restrictions work correctly."
        },
        {
          "id": 4,
          "title": "Implement Mandatory Stadium Registration Flow",
          "description": "Create a workflow that requires stadium registration before team activation",
          "dependencies": [
            1,
            2,
            3
          ],
          "details": "Modify the team creation/activation process to require at least one registered stadium. Implement validation checks that prevent team activation without a stadium. Add clear UI indicators and guidance for users to complete stadium registration. Create appropriate error messages and redirects.",
          "status": "pending",
          "testStrategy": "Test team activation with and without registered stadiums. Verify error handling and user guidance."
        },
        {
          "id": 5,
          "title": "Implement Favorite Stadiums Functionality",
          "description": "Add feature for users to mark and manage favorite stadiums",
          "dependencies": [
            3
          ],
          "details": "Create UI elements for marking stadiums as favorites. Implement backend storage for user favorite preferences. Add a filtered view to quickly access favorite stadiums. Design the feature to work within the role-based permission system, allowing all user levels to have favorites but with appropriate access restrictions.",
          "status": "pending",
          "testStrategy": "Test favorite marking, unmarking, and persistence across sessions. Verify favorites display correctly for different user roles."
        }
      ]
    },
    {
      "id": 10,
      "title": "Team Search and Join System",
      "description": "Implement team discovery and membership request system",
      "details": "Create TeamSearch component with region-based filtering. Implement team discovery with pagination. Create join request system with approval/rejection workflow. Setup notification system for join requests. Implement team listing with basic information display.",
      "testStrategy": "Test team search functionality, verify filtering works, test join request flow, validate approval/rejection process, and test notification delivery.",
      "priority": "medium",
      "dependencies": [
        9
      ],
      "status": "pending",
      "subtasks": [
        {
          "id": 1,
          "title": "Develop Team Search Component with Region-Based Filtering and Pagination",
          "description": "Implement a frontend component that allows users to search for teams, filter results by region, and navigate through paginated results.",
          "dependencies": [],
          "details": "The component should support responsive design for mobile devices and provide real-time search and filtering based on user-selected regions. Pagination controls must be intuitive and accessible.",
          "status": "pending",
          "testStrategy": "Verify that searching, filtering, and pagination work correctly across desktop and mobile devices using a variety of test cases and regions."
        },
        {
          "id": 2,
          "title": "Implement Team Listing with Basic Information Display",
          "description": "Display a list of teams with essential information such as team name, home stadium, region, and current member count.",
          "dependencies": [
            1
          ],
          "details": "Ensure that each team entry shows required fields and is visually optimized for both desktop and mobile views. Home stadium registration must be enforced for all teams.",
          "status": "pending",
          "testStrategy": "Check that all required team information is displayed and formatted correctly, and that teams without a registered home stadium are flagged or excluded."
        },
        {
          "id": 3,
          "title": "Build Join Request System with Approval/Rejection Workflow",
          "description": "Enable users to request to join a team, and implement a workflow for team admins to approve or reject requests based on role-based permissions.",
          "dependencies": [
            2
          ],
          "details": "Integrate a hierarchical permission system (구단주 > 운영진 > 주장 > 일반멤버) to control who can approve or reject join requests. Ensure that only authorized roles can manage requests.",
          "status": "pending",
          "testStrategy": "Simulate join requests from various user roles and verify that only users with appropriate permissions can approve or reject requests."
        },
        {
          "id": 4,
          "title": "Integrate Notification System for Join Requests",
          "description": "Set up a notification system to alert team admins of new join requests and notify users of approval or rejection outcomes.",
          "dependencies": [
            3
          ],
          "details": "Notifications should be delivered in real-time and be accessible on both desktop and mobile platforms. Ensure that notification content is clear and actionable.",
          "status": "pending",
          "testStrategy": "Trigger join requests and workflow actions, confirming that notifications are sent to the correct users and displayed properly on all devices."
        },
        {
          "id": 5,
          "title": "Support External and Unregistered Team Handling",
          "description": "Allow the system to manage and display teams that are not yet registered in the platform, with clear distinction and restricted join functionality.",
          "dependencies": [
            2
          ],
          "details": "External teams should be listed with limited information and a prompt for registration. Prevent join requests to unregistered teams and provide guidance for team registration.",
          "status": "pending",
          "testStrategy": "Attempt to search for, view, and join both registered and external teams, ensuring correct restrictions and messaging are enforced."
        }
      ]
    },
    {
      "id": 11,
      "title": "Member Management System",
      "description": "Implement comprehensive member management with approval and role assignment",
      "details": "Create MemberManagement dashboard for team administrators. Implement member approval/rejection functionality. Create role assignment interface. Setup member removal/kick functionality. Implement member list with role indicators and management actions.",
      "testStrategy": "Test member approval/rejection flow, verify role assignment works, test member removal functionality, validate permission checks for management actions.",
      "priority": "medium",
      "dependencies": [
        10
      ],
      "status": "pending",
      "subtasks": [
        {
          "id": 1,
          "title": "Member Dashboard UI Implementation",
          "description": "Create the MemberManagement dashboard interface with role indicators and management actions",
          "dependencies": [],
          "details": "Develop a responsive dashboard UI that displays member information with clear role indicators (구단주, 운영진, 주장, 일반멤버) and includes management action buttons. Ensure mobile optimization with responsive design principles for various screen sizes.",
          "status": "pending",
          "testStrategy": "Verify UI rendering across different devices and screen sizes. Test role indicator visibility and management action button functionality."
        },
        {
          "id": 2,
          "title": "Member Approval/Rejection System",
          "description": "Implement functionality for team administrators to approve or reject new member applications",
          "dependencies": [
            1
          ],
          "details": "Create an approval queue interface showing pending member applications with applicant details. Implement approve/reject buttons with confirmation dialogs. Add notification system to alert applicants of their status. Ensure proper permission checks based on the role hierarchy.",
          "status": "pending",
          "testStrategy": "Test approval/rejection workflows with different administrator roles. Verify notifications are sent correctly and member status updates appropriately."
        },
        {
          "id": 3,
          "title": "Role Assignment Interface",
          "description": "Develop interface for assigning and modifying member roles within the hierarchical structure",
          "dependencies": [
            1
          ],
          "details": "Create a role management interface that allows higher-ranked members to assign roles based on the hierarchy (구단주 > 운영진 > 주장 > 일반멤버). Implement permission validation to ensure only authorized users can modify roles. Include role change history tracking and confirmation workflows.",
          "status": "pending",
          "testStrategy": "Test role assignment permissions across different user types. Verify hierarchy enforcement and role change history recording."
        },
        {
          "id": 4,
          "title": "Member Removal Functionality",
          "description": "Implement system for removing/kicking members with appropriate permissions and confirmations",
          "dependencies": [
            1
          ],
          "details": "Develop member removal functionality with proper permission checks based on role hierarchy. Create confirmation workflows to prevent accidental removals. Implement reason documentation for removals and notification system for removed members. Add archiving of removed member data for historical reference.",
          "status": "pending",
          "testStrategy": "Test removal permissions across different roles. Verify confirmation workflows, notifications, and proper data archiving."
        },
        {
          "id": 5,
          "title": "Member List with Filtering and Search",
          "description": "Create comprehensive member listing with filtering, search, and sorting capabilities",
          "dependencies": [
            1
          ],
          "details": "Implement a filterable and searchable member list showing role indicators, join dates, and activity status. Add sorting options by name, role, join date, and activity. Include pagination for performance optimization on mobile devices. Develop export functionality for administrative purposes.",
          "status": "pending",
          "testStrategy": "Test search, filter, and sort functionality with various data sets. Verify pagination works correctly on mobile devices and export functionality produces correct data."
        }
      ]
    },
    {
      "id": 12,
      "title": "External Team Management",
      "description": "Implement system for managing non-registered teams and their information",
      "details": "Create ExternalTeam registration component with fields: name, region, contact info. Implement external team CRUD operations. Setup external team listing and search. Create external team profile pages. Implement team-specific external team management (each team manages their own external teams).",
      "testStrategy": "Test external team registration, verify CRUD operations, test team-specific data isolation, validate external team profiles, and test search functionality.",
      "priority": "medium",
      "dependencies": [
        11
      ],
      "status": "pending",
      "subtasks": [
        {
          "id": 1,
          "title": "Create ExternalTeam Data Model",
          "description": "Design and implement the database schema for external teams with required fields and relationships",
          "dependencies": [],
          "details": "Create a database model for ExternalTeam with fields: name, region, contact info (email, phone), team logo (optional), team description, creation date, and owning team reference. Implement validation rules for required fields. Set up relationships with registered teams to track which team manages which external teams.",
          "status": "pending",
          "testStrategy": "Verify database schema creation with test data insertion. Test validation rules for required fields and relationship constraints."
        },
        {
          "id": 2,
          "title": "Implement ExternalTeam Registration Component",
          "description": "Develop UI component for registering external teams with all required fields",
          "dependencies": [
            1
          ],
          "details": "Create a responsive form component with fields for team name, region selection dropdown, contact information fields (email, phone), optional logo upload with preview, and team description. Implement client-side validation for required fields. Ensure mobile optimization with appropriate input types and responsive layout. Add permission checks to ensure only authorized users (구단주/운영진) can access this functionality.",
          "status": "pending",
          "testStrategy": "Test form submission with valid and invalid data. Verify mobile responsiveness across different screen sizes. Test permission restrictions for different user roles."
        },
        {
          "id": 3,
          "title": "Implement ExternalTeam CRUD Operations",
          "description": "Develop backend API endpoints and services for creating, reading, updating, and deleting external team records",
          "dependencies": [
            1
          ],
          "details": "Create RESTful API endpoints for: POST /api/external-teams (create), GET /api/external-teams/:id (read), PUT /api/external-teams/:id (update), DELETE /api/external-teams/:id (delete). Implement service layer with business logic for CRUD operations. Add permission checks to ensure only the team that created an external team record can modify it. Implement proper error handling and validation.",
          "status": "pending",
          "testStrategy": "Test each API endpoint with valid and invalid requests. Verify permission checks work correctly. Test error handling for edge cases."
        },
        {
          "id": 4,
          "title": "Develop ExternalTeam Listing and Search",
          "description": "Create UI components for listing, filtering, and searching external teams",
          "dependencies": [
            2,
            3
          ],
          "details": "Implement a responsive grid/list view of external teams with pagination. Add search functionality by team name and region. Implement filters for sorting (alphabetical, recently added). Create a team-specific view that shows only external teams managed by the current team. Ensure mobile optimization with appropriate layouts for different screen sizes. Add permission checks to control visibility based on user roles.",
          "status": "pending",
          "testStrategy": "Test search and filter functionality with various criteria. Verify pagination works correctly. Test responsive layout on different devices. Verify permission-based visibility."
        },
        {
          "id": 5,
          "title": "Create ExternalTeam Profile Pages",
          "description": "Develop detailed profile pages for external teams with all relevant information",
          "dependencies": [
            3,
            4
          ],
          "details": "Create a responsive profile page template for external teams displaying: team name, logo, region, contact information, description, and match history (if available). Implement edit functionality for team owners with appropriate permission checks. Add options to schedule matches with external teams, linking to the match creation system. Ensure mobile optimization with appropriate layouts. Implement breadcrumb navigation for easy return to team listings.",
          "status": "pending",
          "testStrategy": "Test profile page rendering with various team data. Verify edit functionality works for authorized users only. Test mobile responsiveness of profile pages. Verify navigation between listings and profile pages."
        }
      ]
    },
    {
      "id": 13,
      "title": "Match Creation and Management",
      "description": "Implement match creation with home stadium selection and opponent configuration",
      "details": "Create MatchCreation component with home stadium selection (mandatory), opponent selection (registered team vs external team), date/time picker. Implement match type differentiation. Setup match validation and creation logic. Create match listing and detail views.",
      "testStrategy": "Test match creation flow, verify home stadium requirement, test opponent selection for both registered and external teams, validate date/time handling.",
      "priority": "high",
      "dependencies": [
        "11",
        "12"
      ],
      "status": "pending",
      "subtasks": [
        {
          "id": 1,
          "title": "Implement Stadium Selection Component",
          "description": "Create a component for selecting home stadium with validation to ensure it's mandatory",
          "dependencies": [],
          "details": "Develop a reusable stadium selection component that integrates with the stadium management system. Include validation logic to ensure a home stadium is always selected before match creation can proceed. Implement stadium availability checking based on selected date/time.",
          "status": "pending",
          "testStrategy": "Test stadium selection validation, availability checking, and error handling for invalid selections"
        },
        {
          "id": 2,
          "title": "Build Opponent Configuration System",
          "description": "Create opponent selection functionality with support for both registered teams and external teams",
          "dependencies": [],
          "details": "Implement a dual-mode opponent selection system that allows users to either select from registered teams in the platform or create temporary external team profiles. For external teams, capture essential information like team name, contact person, and logo. Apply appropriate RBAC permissions to determine who can create matches with different opponent types.",
          "status": "pending",
          "testStrategy": "Test both registered and external team selection flows, validation of required fields, and RBAC enforcement"
        },
        {
          "id": 3,
          "title": "Develop Match Creation Form",
          "description": "Create a comprehensive match creation form with date/time picker and match type selection",
          "dependencies": [
            1,
            2
          ],
          "details": "Build a mobile-responsive match creation form that integrates the stadium selection and opponent configuration components. Include a date/time picker with validation for future dates only. Implement match type differentiation (friendly, league, tournament) with appropriate fields for each type. Apply RBAC to restrict match creation to appropriate roles (구단주, 운영진).",
          "status": "pending",
          "testStrategy": "Test form validation, mobile responsiveness, and role-based access restrictions"
        },
        {
          "id": 4,
          "title": "Implement Match Listing View",
          "description": "Create a filterable, sortable match listing view with appropriate RBAC controls",
          "dependencies": [
            3
          ],
          "details": "Develop a match listing component that displays upcoming and past matches with filtering options (by date range, opponent, match type). Implement sorting capabilities and pagination for better mobile experience. Apply RBAC to show appropriate action buttons (edit, cancel, delete) based on user role. Include attendance tracking status indicators.",
          "status": "pending",
          "testStrategy": "Test filtering, sorting, pagination, and role-based UI element visibility"
        },
        {
          "id": 5,
          "title": "Create Match Detail View",
          "description": "Implement a comprehensive match detail view with attendance tracking and management features",
          "dependencies": [
            4
          ],
          "details": "Build a detailed match view showing all match information including stadium details, opponent information, date/time, and match type. Implement attendance tracking functionality allowing members to indicate their availability. Add match management controls (edit, cancel) with appropriate RBAC restrictions. Ensure mobile optimization with responsive design for all interactive elements.",
          "status": "pending",
          "testStrategy": "Test attendance tracking functionality, RBAC for management controls, and mobile responsiveness of all interactive elements"
        }
      ]
    },
    {
      "id": 14,
      "title": "Match Attendance Management",
      "description": "Implement attendance tracking for regular members and mercenaries",
      "details": "Create AttendanceManagement component for match organizers. Implement member attendance status tracking (attending/not attending/maybe). Setup mercenary addition functionality. Create real-time attendance counter. Implement attendance status updates with real-time sync.",
      "testStrategy": "Test attendance status updates, verify real-time synchronization, test mercenary addition, validate attendance counting, and test status change notifications.",
      "priority": "high",
      "dependencies": [
        13
      ],
      "status": "pending",
      "subtasks": [
        {
          "id": 1,
          "title": "Create AttendanceManagement Component with Role-Based Permissions",
          "description": "Develop the core AttendanceManagement component with role-based access controls for match organizers, captains, and regular members",
          "dependencies": [],
          "details": "Implement a responsive component that displays attendance information with different editing capabilities based on user roles (구단주 > 운영진 > 주장 > 일반멤버). Include attendance status indicators, filtering options, and ensure mobile optimization with appropriate touch targets and responsive design",
          "status": "pending",
          "testStrategy": "Test component rendering and permission controls across different user roles and device sizes"
        },
        {
          "id": 2,
          "title": "Implement Member Attendance Status Tracking System",
          "description": "Create functionality for tracking and updating member attendance status (attending/not attending/maybe) with real-time synchronization",
          "dependencies": [
            1
          ],
          "details": "Build a status selection interface with toggle buttons for attendance states. Implement real-time database updates using WebSockets or similar technology. Include timestamp tracking for status changes and notification triggers for status updates",
          "status": "pending",
          "testStrategy": "Verify real-time updates across multiple clients and test synchronization under various network conditions"
        },
        {
          "id": 3,
          "title": "Develop Mercenary Addition Functionality",
          "description": "Create a system to add and manage non-registered players (mercenaries) for matches with appropriate tracking",
          "dependencies": [
            1
          ],
          "details": "Implement a form to add temporary players with essential information (name, position, contact). Create a separate section in the attendance list for mercenaries with visual distinction from regular members. Include functionality to convert recurring mercenaries to permanent members",
          "status": "pending",
          "testStrategy": "Test mercenary addition process and verify proper display in attendance lists"
        },
        {
          "id": 4,
          "title": "Build Real-Time Attendance Counter and Analytics",
          "description": "Implement a dynamic counter showing current attendance statistics with visual indicators for match viability",
          "dependencies": [
            2,
            3
          ],
          "details": "Create a dashboard element showing confirmed attendees count, maybe count, and declined count with appropriate visual indicators. Add threshold warnings when attendance is below required levels. Include position-based attendance tracking to highlight imbalances (e.g., too many forwards, not enough defenders)",
          "status": "pending",
          "testStrategy": "Test counter accuracy with various attendance scenarios and verify threshold warning triggers"
        },
        {
          "id": 5,
          "title": "Implement Attendance Notification System",
          "description": "Create an automated notification system for attendance status changes and reminders",
          "dependencies": [
            2,
            4
          ],
          "details": "Develop push notifications for captains and organizers when attendance changes. Implement configurable reminder schedules for upcoming matches. Create attendance summary reports that can be shared via messaging platforms. Ensure all notifications are optimized for mobile delivery",
          "status": "pending",
          "testStrategy": "Test notification delivery across different devices and verify reminder scheduling functionality"
        }
      ]
    },
    {
      "id": 15,
      "title": "Real-time Updates System",
      "description": "Implement Supabase real-time subscriptions for live attendance and match updates",
      "details": "Setup Supabase real-time subscriptions for match_attendances table. Implement real-time attendance updates in UI. Create real-time notification system for match changes. Setup connection management and error handling for real-time features.",
      "testStrategy": "Test real-time attendance updates across multiple clients, verify subscription management, test connection recovery, and validate notification delivery.",
      "priority": "medium",
      "dependencies": [
        14
      ],
      "status": "deferred",
      "subtasks": []
    },
    {
      "id": 16,
      "title": "Match Statistics Input System",
      "description": "Implement goal and assist tracking for players including mercenaries",
      "details": "Create MatchStats input component for post-match data entry. Implement player selection (members + mercenaries) with goal/assist counters. Setup match result recording. Create stats validation and submission logic. Implement edit functionality for match organizers.",
      "testStrategy": "Test stats input for both members and mercenaries, verify data validation, test stats editing, validate submission process, and test result calculation.",
      "priority": "medium",
      "dependencies": [
        15
      ],
      "status": "deferred",
      "subtasks": [
        {
          "id": 1,
          "title": "Design Match Statistics Input Interface",
          "description": "Create a user-friendly interface for inputting match statistics with clear layouts and progressive disclosure of data fields",
          "dependencies": [],
          "details": "Develop a clean, organized layout with 60% white space for better readability. Implement color-coded team bars and collapsible sections to prevent overwhelming users with complex data. Include basic match information fields prominently while allowing deeper statistical inputs through expandable sections.",
          "status": "pending"
        },
        {
          "id": 2,
          "title": "Implement Player Selection and Stats Tracking",
          "description": "Build functionality for selecting players and tracking their individual statistics throughout a match",
          "dependencies": [
            1
          ],
          "details": "Create a player roster system with quick-select options for active players. Design real-time stat tracking components that update without full page reloads. Include templates for different sports with sport-specific statistics fields. Implement a multi-agent tracking system for team sports that maintains context between players.",
          "status": "pending"
        },
        {
          "id": 3,
          "title": "Develop Stats Validation and Submission System",
          "description": "Create validation rules for statistical inputs and build a secure submission process",
          "dependencies": [
            1,
            2
          ],
          "details": "Implement client-side validation to catch common errors before submission. Create server-side validation rules to ensure data integrity and prevent impossible statistical combinations. Design a confirmation system that summarizes entered stats before final submission. Include progress indicators for multi-step submission processes.",
          "status": "pending"
        },
        {
          "id": 4,
          "title": "Build Stats Editing and Correction Features",
          "description": "Develop functionality to edit, correct, and update previously entered statistics",
          "dependencies": [
            3
          ],
          "details": "Create an interface for reviewing submitted statistics with clear highlighting of editable fields. Implement version control to track changes to statistics over time. Design an approval workflow for corrections that might affect aggregated team statistics. Include batch editing capabilities for efficient corrections across multiple players or events.",
          "status": "pending"
        }
      ]
    },
    {
      "id": 17,
      "title": "Personal Statistics Dashboard",
      "description": "Implement individual player statistics and attendance rate tracking",
      "details": "Create PersonalStats dashboard showing individual goals, assists, attendance rate, and match history. Implement team-specific stats filtering. Setup stats calculation functions. Create visual charts for stats display. Implement stats comparison features.",
      "testStrategy": "Test stats calculation accuracy, verify team-specific filtering, test chart rendering, validate attendance rate calculation, and test stats history.",
      "priority": "medium",
      "dependencies": [
        16
      ],
      "status": "deferred",
      "subtasks": [
        {
          "id": 1,
          "title": "Individual Statistics Calculation and Display",
          "description": "Develop functionality to calculate and display personal statistics for each user, such as performance metrics, scores, or activity counts.",
          "dependencies": [],
          "details": "This includes aggregating raw data into meaningful statistics and presenting them in a user-friendly format.",
          "status": "pending"
        },
        {
          "id": 2,
          "title": "Attendance Rate Tracking",
          "description": "Implement a system to track and calculate attendance rates for individuals over a specified period.",
          "dependencies": [
            1
          ],
          "details": "Attendance data should be collected, stored, and used to compute attendance percentages or trends for each user.",
          "status": "pending"
        },
        {
          "id": 3,
          "title": "Team-Specific Stats Filtering",
          "description": "Enable filtering of personal statistics based on team membership or participation.",
          "dependencies": [
            1
          ],
          "details": "Users should be able to view their stats within the context of specific teams, allowing for more granular analysis.",
          "status": "pending"
        },
        {
          "id": 4,
          "title": "Visual Charts and Analytics",
          "description": "Create visual representations (charts, graphs, dashboards) of personal and team statistics for easier analysis and interpretation.",
          "dependencies": [
            1,
            2,
            3
          ],
          "details": "Utilize data visualization libraries to present trends, comparisons, and progress over time.",
          "status": "pending"
        },
        {
          "id": 5,
          "title": "Stats Comparison Features",
          "description": "Develop features that allow users to compare their statistics with others or with team averages.",
          "dependencies": [
            1,
            3,
            4
          ],
          "details": "This includes side-by-side comparisons, ranking, and highlighting differences or improvements.",
          "status": "pending"
        }
      ]
    },
    {
      "id": 18,
      "title": "Team Statistics and Records",
      "description": "Implement team-level statistics and win/loss records against external teams",
      "details": "Create TeamStats dashboard with overall team performance. Implement external team records (win/loss/draw, goals for/against). Setup team ranking and comparison features. Create season-based stats filtering. Implement team performance analytics.",
      "testStrategy": "Test team stats aggregation, verify external team records accuracy, test ranking calculations, validate season filtering, and test performance analytics.",
      "priority": "medium",
      "dependencies": [
        17
      ],
      "status": "deferred",
      "subtasks": []
    },
    {
      "id": 19,
      "title": "Mercenary Management System",
      "description": "Implement comprehensive mercenary tracking and management",
      "details": "Create MercenaryPool management for tracking all mercenaries. Implement mercenary profile creation with contact info, position, rating. Setup mercenary stats tracking across matches. Create mercenary search and invitation system. Implement mercenary performance analytics.",
      "testStrategy": "Test mercenary profile creation, verify stats tracking across matches, test search functionality, validate invitation system, and test performance analytics.",
      "priority": "medium",
      "dependencies": [
        18
      ],
      "status": "deferred",
      "subtasks": []
    },
    {
      "id": 20,
      "title": "Multi-team Support System",
      "description": "Implement support for users belonging to multiple teams",
      "details": "Create team switching interface in navigation. Implement primary team designation. Setup team-specific dashboards and data filtering. Create unified schedule view across all teams. Implement team conflict detection for overlapping matches.",
      "testStrategy": "Test team switching functionality, verify data isolation between teams, test unified schedule view, validate conflict detection, and test primary team features.",
      "priority": "medium",
      "dependencies": [
        19
      ],
      "status": "deferred",
      "subtasks": []
    },
    {
      "id": 21,
      "title": "Notification and Announcement System",
      "description": "Implement team announcements and notification management",
      "details": "Create Announcement creation and management for team administrators. Implement notification system for match updates, join requests, and announcements. Setup notification preferences and settings. Create notification history and read status tracking.",
      "testStrategy": "Test announcement creation and distribution, verify notification delivery, test notification preferences, validate read status tracking, and test notification history.",
      "priority": "medium",
      "dependencies": [
        20
      ],
      "status": "deferred",
      "subtasks": [
        {
          "id": 1,
          "title": "Design Announcement Creation and Management Interface",
          "description": "Develop an administrative interface for creating, editing, scheduling, and managing announcements that will be sent as notifications.",
          "dependencies": [],
          "details": "This includes UI/UX for announcement input, scheduling options, editing capabilities, and administrative controls for publishing or retracting announcements.",
          "status": "pending"
        },
        {
          "id": 2,
          "title": "Implement Notification Delivery and Targeting System",
          "description": "Build the backend services responsible for queuing, delivering, and targeting notifications to the appropriate users across multiple channels (email, SMS, push, etc.).",
          "dependencies": [
            1
          ],
          "details": "This involves integrating with message queues, defining delivery channels, and implementing logic for targeting users based on announcement metadata and user segmentation.",
          "status": "pending"
        },
        {
          "id": 3,
          "title": "Develop Notification Preferences and Settings Module",
          "description": "Create a user-facing module that allows users to set and manage their notification preferences, including opt-in/out options and channel selection.",
          "dependencies": [
            2
          ],
          "details": "This module should store and enforce user preferences, such as notification types, frequency limits, and preferred delivery channels, ensuring compliance during notification delivery.",
          "status": "pending"
        },
        {
          "id": 4,
          "title": "Implement Notification History and Read Status Tracking",
          "description": "Build the system to record notification delivery history and track read/unread status for each user.",
          "dependencies": [
            3
          ],
          "details": "This includes database schema for notification logs, APIs for querying notification history, and mechanisms for marking notifications as read or unread.",
          "status": "pending"
        }
      ]
    },
    {
      "id": 22,
      "title": "Mobile UI/UX Optimization",
      "description": "Implement basic responsive design and mobile compatibility for MVP",
      "status": "pending",
      "dependencies": [
        11
      ],
      "priority": "medium",
      "details": "Focus on essential mobile compatibility for MVP release. Implement basic responsive components and touch-friendly interactions. Advanced mobile optimization features including offline functionality, advanced gestures, and performance optimization will be deferred to post-MVP phases.",
      "testStrategy": "Test basic responsive layouts on various mobile devices and screen sizes, verify touch interactions work properly, and validate mobile compatibility across different browsers.",
      "subtasks": [
        {
          "id": 1,
          "title": "Implement Fluid Layouts for Mobile Screens",
          "description": "Create responsive grid layouts that adapt to different mobile screen sizes for the MVP",
          "dependencies": [],
          "details": "Develop a fluid layout system using CSS that automatically adjusts content based on screen width. Focus on implementing 3-4 key breakpoints (mobile, tablet, desktop) using min-width media queries following mobile-first approach. Ensure all critical UI components maintain usability across screen sizes.",
          "status": "pending",
          "testStrategy": "Test layouts on multiple device sizes (320px, 768px, 1024px, 1440px) to verify proper content scaling and readability"
        },
        {
          "id": 2,
          "title": "Optimize Touch-Friendly Navigation",
          "description": "Redesign navigation elements to be easily accessible and usable on touch devices",
          "dependencies": [
            1
          ],
          "details": "Increase tap target sizes for all interactive elements to minimum 44x44px. Implement hamburger menu for mobile views. Ensure adequate spacing between clickable elements to prevent accidental taps. Focus on making critical functions (match creation, attendance tracking, member management) easily accessible on mobile.",
          "status": "pending",
          "testStrategy": "Conduct touch-based usability testing on actual mobile devices to verify navigation comfort and accuracy"
        },
        {
          "id": 3,
          "title": "Implement Responsive Images and Media",
          "description": "Optimize image loading and display for mobile devices to improve performance",
          "dependencies": [
            1
          ],
          "details": "Implement responsive image techniques using srcset and sizes attributes. Create multiple image sizes for different viewport widths. Optimize image file sizes for mobile data connections. Ensure stadium images, team logos, and profile pictures scale appropriately on mobile devices.",
          "status": "pending",
          "testStrategy": "Test image loading times on various connection speeds and verify proper scaling on different device sizes"
        },
        {
          "id": 4,
          "title": "Create Mobile-Optimized Forms",
          "description": "Redesign critical forms for mobile input, focusing on member management and match creation",
          "dependencies": [
            1,
            2
          ],
          "details": "Simplify form layouts for mobile screens. Use appropriate HTML5 input types for mobile keyboards (email, tel, date). Implement step-by-step form progression for complex tasks like match creation. Ensure form validation provides clear mobile-friendly error messages.",
          "status": "pending",
          "testStrategy": "Test form completion on mobile devices with different screen sizes and input methods"
        },
        {
          "id": 5,
          "title": "Implement Role-Based Mobile Views",
          "description": "Optimize mobile UI based on user roles (team owner, staff, captain, regular member)",
          "dependencies": [
            1,
            2,
            4
          ],
          "details": "Create simplified mobile dashboards tailored to each user role's permissions and common tasks. Ensure role-specific actions (approval workflows, stadium management) are accessible on mobile. Hide or simplify advanced features that aren't essential for mobile use while maintaining the role hierarchy (team owner > staff > captain > regular member).",
          "status": "pending",
          "testStrategy": "Test user journeys for each role on mobile devices to verify appropriate access and functionality"
        }
      ]
    },
    {
      "id": 23,
      "title": "Data Migration and Import Tools",
      "description": "Create tools for importing existing team data from spreadsheets",
      "details": "Create CSV/Excel import functionality for team members, match history, and stats. Implement data validation and error handling for imports. Setup data mapping interface for flexible import. Create export functionality for backup purposes.",
      "testStrategy": "Test import functionality with various file formats, verify data validation, test error handling for malformed data, validate export functionality, and test data integrity.",
      "priority": "low",
      "dependencies": [
        22
      ],
      "status": "deferred",
      "subtasks": []
    },
    {
      "id": 24,
      "title": "Performance Optimization and Caching",
      "description": "Implement comprehensive performance optimization and caching strategies",
      "details": "Implement client-side caching with SWR or React Query. Setup image optimization with Next.js Image component. Implement code splitting and lazy loading. Setup database query optimization. Implement CDN integration for static assets.",
      "testStrategy": "Test loading performance across different network conditions, verify caching behavior, test image optimization, validate code splitting, and measure performance metrics.",
      "priority": "medium",
      "dependencies": [
        23
      ],
      "status": "deferred",
      "subtasks": [
        {
          "id": 1,
          "title": "Client-Side Caching Implementation",
          "description": "Implement browser caching strategies to store static resources (images, CSS, JavaScript) on the user's device, reducing server requests and improving load times for repeat visits.",
          "dependencies": [],
          "details": "Configure cache-control headers and set appropriate expiration policies for static assets. Ensure that frequently used resources are cached efficiently to minimize redundant downloads.",
          "status": "pending"
        },
        {
          "id": 2,
          "title": "Image and Asset Optimization",
          "description": "Optimize images and other static assets to reduce file sizes without compromising quality, ensuring faster page loads and improved performance.",
          "dependencies": [],
          "details": "Use tools like TinyPNG or ImageOptim for image compression, and minify CSS, JavaScript, and HTML files to remove unnecessary characters and whitespace.",
          "status": "pending"
        },
        {
          "id": 3,
          "title": "Code Splitting and Lazy Loading",
          "description": "Implement code splitting and lazy loading techniques to load only the necessary code and assets when required, reducing initial load times and improving perceived performance.",
          "dependencies": [],
          "details": "Utilize modern JavaScript frameworks' built-in code splitting features and defer loading of non-critical resources until they are needed by the user.",
          "status": "pending"
        },
        {
          "id": 4,
          "title": "Database Query Optimization",
          "description": "Analyze and optimize database queries to reduce latency and improve backend response times, ensuring efficient data retrieval for dynamic content.",
          "dependencies": [],
          "details": "Review query execution plans, add appropriate indexes, and refactor inefficient queries to minimize database load and speed up data access.",
          "status": "pending"
        },
        {
          "id": 5,
          "title": "CDN Integration and Static Asset Management",
          "description": "Integrate a Content Delivery Network (CDN) to distribute static assets globally, reducing latency and improving load times for users regardless of their geographic location.",
          "dependencies": [],
          "details": "Configure CDN caching rules, manage asset versioning, and ensure that static files are served from edge locations closest to the user.",
          "status": "pending"
        }
      ]
    },
    {
      "id": 25,
      "title": "Testing and Quality Assurance",
      "description": "Implement comprehensive testing suite and quality assurance processes",
      "details": "Setup unit testing with Jest and React Testing Library. Implement integration tests for critical user flows. Create end-to-end tests with Playwright or Cypress. Setup automated testing pipeline. Implement error monitoring and logging. Create user acceptance testing procedures.",
      "testStrategy": "Achieve 80%+ test coverage, verify all critical user flows work correctly, test error scenarios and edge cases, validate performance benchmarks, and ensure accessibility compliance.",
      "priority": "medium",
      "dependencies": [
        24
      ],
      "status": "deferred",
      "subtasks": []
    },
    {
      "id": 26,
      "title": "Implement External Team Data Succession System",
      "description": "Develop a system to automatically transfer and link historical match data, statistics, and opponent records from external teams to newly registered teams upon official registration, with admin approval and rollback features.",
      "details": "Design and implement a data succession workflow triggered when an external team completes official registration. Build a matching engine to associate external team records with the new team, using fuzzy matching on team names and metadata, and provide an admin interface for reviewing and approving matches. Upon approval, transfer all relevant match records, statistics, and opponent histories to the new team, ensuring data integrity and preventing duplication. Implement audit logging for all succession actions, including a rollback mechanism to revert changes if necessary. Integrate validation checks to prevent erroneous or duplicate data transfers. Ensure the system is extensible for future enhancements and complies with existing team and match management modules.",
      "testStrategy": "1. Create test cases for various external team registration scenarios, including similar and ambiguous team names. 2. Verify that, upon admin approval, all historical match data, statistics, and opponent records are correctly transferred and linked to the new team without duplication. 3. Test the admin approval workflow, ensuring incorrect matches can be rejected and only approved matches trigger data transfer. 4. Validate the audit log records all actions and that the rollback feature restores the previous state accurately. 5. Perform data integrity checks post-succession to ensure no orphaned or duplicated records exist. 6. Conduct regression testing to confirm no impact on existing team and match management functionalities.",
      "status": "pending",
      "dependencies": [
        12,
        13
      ],
      "priority": "high",
      "subtasks": [
        {
          "id": 1,
          "title": "Design External Team Data Matching Engine",
          "description": "Create a fuzzy matching algorithm to associate external team records with newly registered teams based on team names and metadata",
          "dependencies": [],
          "details": "Develop a matching engine that uses fuzzy string matching algorithms to identify potential matches between external teams and newly registered teams. Implement scoring mechanisms based on team name similarity, player roster overlap, and historical metadata. Include configurable threshold settings for match confidence levels. The engine should generate match suggestions for admin review and handle edge cases like team name changes or mergers.",
          "status": "pending",
          "testStrategy": "Test with various team name variations, including misspellings and abbreviations. Validate matching accuracy against a pre-classified dataset of known team relationships."
        },
        {
          "id": 2,
          "title": "Build Admin Approval Interface for Team Data Succession",
          "description": "Develop an interface for administrators to review, approve, or reject suggested matches between external and newly registered teams",
          "dependencies": [
            1
          ],
          "details": "Create a responsive admin dashboard that displays potential team matches identified by the matching engine. Include detailed comparison views showing team metadata, match history, and player overlap. Implement approval workflows with options to approve, reject, or manually adjust matches. Design the interface to be mobile-optimized following the platform's responsive design principles. Ensure the interface respects the role-based permission system, limiting access to administrators with appropriate privileges.",
          "status": "pending",
          "testStrategy": "Conduct usability testing with admin users to ensure the interface is intuitive. Test across different devices to verify mobile responsiveness."
        },
        {
          "id": 3,
          "title": "Implement Data Transfer and Integration System",
          "description": "Create the core system to transfer match records, statistics, and opponent histories from external teams to newly registered teams upon approval",
          "dependencies": [
            2
          ],
          "details": "Develop a data migration service that transfers all relevant historical data from external team records to the newly registered team upon admin approval. Implement data transformation logic to ensure compatibility with the existing database schema. Create validation checks to prevent duplicate entries and maintain data integrity. Design the system to handle various data types including match results, player statistics, home stadium information, and opponent records. Ensure proper linking of transferred data with the new team's profile.",
          "status": "pending",
          "testStrategy": "Create test scenarios with sample data sets to verify complete and accurate data transfer. Test edge cases like partial transfers and handling of conflicting data."
        },
        {
          "id": 4,
          "title": "Develop Audit Logging and Rollback Mechanism",
          "description": "Create comprehensive logging for all succession actions and implement a system to revert changes if necessary",
          "dependencies": [
            3
          ],
          "details": "Implement detailed audit logging that records all data succession activities, including user actions, timestamps, and affected records. Design a rollback mechanism that can revert specific succession events without affecting other system data. Create snapshots of team data before succession to enable clean rollbacks. Develop an admin interface for viewing the audit log and initiating rollback procedures. Ensure the rollback system maintains referential integrity across all affected database tables.",
          "status": "pending",
          "testStrategy": "Test rollback functionality with various scenarios including partial and complete reversions. Verify audit logs capture all relevant details for compliance and troubleshooting."
        },
        {
          "id": 5,
          "title": "Create Succession Workflow Integration with Existing Modules",
          "description": "Integrate the data succession system with existing team registration, match management, and member management modules",
          "dependencies": [
            3,
            4
          ],
          "details": "Develop integration points between the new succession system and existing platform modules. Create event triggers that initiate the succession workflow upon completion of team registration. Implement notifications to alert administrators about pending succession approvals. Ensure the system respects existing role-based permissions and integrates with the member management system. Update the match system to properly display transferred match history. Optimize all interfaces for mobile devices following the platform's responsive design guidelines.",
          "status": "pending",
          "testStrategy": "Perform end-to-end testing of the complete workflow from team registration through succession approval and data transfer. Test integration points with all connected modules to ensure seamless operation."
        }
      ]
    },
    {
      "id": 27,
      "title": "QR Code Integration System for External Teams and Mercenaries",
      "description": "Implement a comprehensive QR code-based authentication system that allows external teams and mercenaries to integrate their historical records when joining the platform as registered users.",
      "details": "Create a multi-component integration system with the following key implementations:\n\n1. **Matching Code Generation Service**: Develop a unique code generator that creates cryptographically secure matching codes for external teams and mercenaries. Implement QR code generation using libraries like qrcode.js, storing codes in a secure mapping table with expiration timestamps.\n\n2. **Integration Request Interface**: Build a user-friendly form where new registrants can input matching codes or scan QR codes. Create validation logic to verify code authenticity and check expiration status. Implement real-time feedback for code validation.\n\n3. **Bidirectional Authentication System**: Develop a two-step approval process where the original team administrator must approve the integration request. Create notification system to alert administrators of pending integration requests. Implement secure token-based authentication for the approval process.\n\n4. **Data Integration Engine**: Build comprehensive data migration logic that safely transfers match records, statistics, attendance data, and performance metrics from external/mercenary profiles to registered user accounts. Implement conflict resolution algorithms for overlapping data periods.\n\n5. **Audit and Rollback System**: Create detailed logging for all integration operations including timestamps, data transferred, and approval chains. Implement rollback functionality that can safely reverse integrations if issues are discovered. Store backup snapshots before each integration.\n\n6. **Data Integrity Verification**: Develop validation checks to ensure statistical consistency after integration (total goals, match counts, etc.). Implement automated conflict detection for impossible scenarios (same player in multiple matches simultaneously). Create data reconciliation reports for administrators.\n\nTechnical considerations: Use database transactions for atomic operations, implement rate limiting for integration requests, create secure API endpoints with proper authentication, and ensure GDPR compliance for data transfers.",
      "testStrategy": "Verify QR code generation produces valid, scannable codes that correctly link to matching records. Test the complete integration workflow from code generation through final data merge, ensuring all historical records transfer accurately. Validate the bidirectional authentication by testing approval/rejection scenarios and confirming proper notification delivery. Test data integrity by creating scenarios with conflicting records and verifying resolution mechanisms work correctly. Verify rollback functionality by performing integrations and successfully reversing them without data loss. Test edge cases including expired codes, duplicate integration attempts, and concurrent approval requests. Perform load testing on the integration system with multiple simultaneous requests. Validate audit logs capture all required information and can be used for compliance reporting.",
      "status": "pending",
      "dependencies": [
        12,
        19
      ],
      "priority": "medium",
      "subtasks": [
        {
          "id": 1,
          "title": "Develop Secure Matching Code and QR Generation Service",
          "description": "Implement a backend service that generates cryptographically secure matching codes for external teams and mercenaries, encodes them as QR codes, and stores them in a secure mapping table with expiration timestamps.",
          "dependencies": [],
          "details": "Use established cryptographic libraries to generate unique codes. Integrate a QR code generation library (e.g., qrcode.js) to create scannable codes. Store each code with metadata (team/mercenary ID, expiration, usage status) in the database. Ensure codes are single-use and expire after a configurable period.",
          "status": "pending",
          "testStrategy": "Unit test code generation for uniqueness and expiration logic. Validate QR code output for scannability and correct payload. Test database mapping for correct associations and expiry enforcement."
        },
        {
          "id": 2,
          "title": "Build Integration Request Interface with Real-Time Validation",
          "description": "Create a responsive web/mobile interface for new registrants to input or scan matching codes, with real-time validation and user feedback on code authenticity and expiration.",
          "dependencies": [
            1
          ],
          "details": "Design a user-friendly form supporting both manual code entry and QR scanning. Implement frontend logic to validate code format and backend API to check code validity and expiration. Provide immediate feedback (success, invalid, expired) and guide users through the next steps.",
          "status": "pending",
          "testStrategy": "Perform UI/UX testing on multiple devices. Simulate valid, invalid, and expired codes to verify feedback accuracy. Test QR scanning functionality across browsers and mobile devices."
        },
        {
          "id": 3,
          "title": "Implement Bidirectional Authentication and Approval Workflow",
          "description": "Develop a two-step authentication process where original team administrators approve integration requests, including notification and secure token-based approval mechanisms.",
          "dependencies": [
            2
          ],
          "details": "Set up a notification system to alert team admins of pending requests. Build an approval interface for admins, secured with token-based authentication. Ensure only authorized admins can approve or reject requests, and log all actions for auditability.",
          "status": "pending",
          "testStrategy": "Test notification delivery and admin interface usability. Attempt unauthorized approvals to verify access controls. Confirm that approval/rejection updates request status and triggers appropriate user feedback."
        },
        {
          "id": 4,
          "title": "Design and Implement Data Integration and Conflict Resolution Engine",
          "description": "Create backend logic to migrate historical match records, statistics, attendance, and performance data from external profiles to registered user accounts, with algorithms to resolve data conflicts.",
          "dependencies": [
            3
          ],
          "details": "Map external data structures to platform schemas. Implement transactional data migration with rollback on failure. Develop conflict resolution rules for overlapping periods (e.g., duplicate matches, attendance). Ensure atomicity and data integrity throughout the process.",
          "status": "pending",
          "testStrategy": "Run migration tests with varied data sets, including overlapping and conflicting records. Verify correct mapping and resolution. Simulate failures to test rollback and data consistency."
        },
        {
          "id": 5,
          "title": "Establish Audit Logging, Rollback, and Data Integrity Verification",
          "description": "Implement comprehensive logging for all integration operations, enable rollback to pre-integration state, and develop automated checks for post-integration data integrity and reconciliation.",
          "dependencies": [
            4
          ],
          "details": "Log all integration actions with timestamps, user IDs, and approval chains. Store backup snapshots before each integration. Provide rollback functionality to restore previous state if issues arise. Run automated scripts to verify statistical consistency and detect anomalies (e.g., duplicate players in matches). Generate reconciliation reports for administrators.",
          "status": "pending",
          "testStrategy": "Review logs for completeness and accuracy. Test rollback by performing and reversing integrations. Validate integrity checks by introducing intentional data errors and confirming detection and reporting."
        }
      ]
    }
  ]
}